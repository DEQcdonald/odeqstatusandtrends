# convert to NAD 83
if (nrow(df.nad27)>0) {
df.nad27.nad83 <- sp::spTransform(df.nad27, sp::CRS("+init=epsg:4269"))
df.nad83 <- rbind(df.nad83, df.nad27.nad83)
}
if (nrow(df.wgs84)>0) {
df.wgs84.nad83 <- sp::spTransform(df.wgs84, sp::CRS("+init=epsg:4269"))
df.nad83 <- rbind(df.nad83, df.wgs84.nad83)
}
poly.nad83 <- sp::spTransform(polygon, sp::CRS("+init=epsg:4269"))
if(outside) {
# stations outside polygon
stations.out <- unique(df.nad83[!df.nad83@data[,id_col] %in% unique(df.nad83[poly.nad83,]@data[,id_col]),]@data[,id_col])
return(stations.out[[id_col]])
} else {
stations.in <- unique(df.nad83[poly.nad83,]@data[,id_col])
return(stations.in[[id_col]])
}
}
dplyr::filter(stations, MLocID %in% StationsInPoly(stations, polygon, outside = FALSE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, polygon, outside = FALSE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
if(exclude.tribal.lands){
print("Removing stations within tribal lands...")
tribal.lands <- rgdal::readOGR(dsn = "//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/R_support_files",
layer = 'tl_2017_or_aiannh', integer64="warn.loss", verbose = FALSE)
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, tribal.lands, outside = TRUE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
}
if(any(stations$AU_ID == "99")){
print("Removing Assessment Unit '99'...")
stations <- stations %>% dplyr::filter(AU_ID != "99")
}
View(stations)
get_stations_WQP <- function(polygon, start_date, end_date, huc8, exclude.tribal.lands = TRUE) {
# Get Stations within WQP database
wqp_siteType = 'Estuary;Ocean;Stream;Lake, Reservoir, Impoundment'
wqp_hucs <- paste(huc8, collapse = ";")
wqp_enddate <- format(as.Date(end.date, format = "%Y-%m-%d"), "%m-%d-%Y")
s.time <- Sys.time()
stations <- dataRetrieval::whatWQPsites(huc = wqp_hucs, providers = "STORET", startDateLo = "11-01-2018",
startDateHi = wqp_enddate, siteType = wqp_siteType)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds"))
stations <- stations %>% dplyr::rename(OrgID = OrganizationIdentifier, MLocID = MonitoringLocationIdentifier,
StationDes = MonitoringLocationName, Lat_DD = LatitudeMeasure, Long_DD = LongitudeMeasure,
Datum = HorizontalCoordinateReferenceSystemDatumName)
stations <- stations %>% dplyr::filter(!OrgID == "OREGONDEQ")
# Clip stations to input polygon
print("Clipping stations to your shapefile...")
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, polygon, outside = FALSE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
if(exclude.tribal.lands){
print("Removing stations within tribal lands...")
tribal.lands <- rgdal::readOGR(dsn = "//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/R_support_files",
layer = 'tl_2017_or_aiannh', integer64="warn.loss", verbose = FALSE)
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, tribal.lands, outside = TRUE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
}
if(any(stations$AU_ID == "99")){
print("Removing Assessment Unit '99'...")
stations <- stations %>% dplyr::filter(AU_ID != "99")
}
return(stations)
}
hucs <- unique(clack_stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
get_stations_WQP <- function(polygon, start_date, end_date, huc8, exclude.tribal.lands = TRUE) {
# Get Stations within WQP database
wqp_siteType = 'Estuary;Ocean;Stream;Lake, Reservoir, Impoundment'
wqp_hucs <- paste(huc8, collapse = ";")
wqp_enddate <- format(as.Date(end.date, format = "%Y-%m-%d"), "%m-%d-%Y")
s.time <- Sys.time()
stations <- dataRetrieval::whatWQPsites(huc = wqp_hucs, providers = "STORET", startDateLo = "11-01-2018",
startDateHi = wqp_enddate, siteType = wqp_siteType)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds"))
stations <- stations %>% dplyr::rename(OrgID = OrganizationIdentifier, MLocID = MonitoringLocationIdentifier,
StationDes = MonitoringLocationName, Lat_DD = LatitudeMeasure, Long_DD = LongitudeMeasure,
Datum = HorizontalCoordinateReferenceSystemDatumName)
stations <- stations %>% dplyr::filter(!OrgID == "OREGONDEQ")
# Clip stations to input polygon
print("Clipping stations to your shapefile...")
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, polygon, outside = FALSE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
if(exclude.tribal.lands){
print("Removing stations within tribal lands...")
tribal.lands <- rgdal::readOGR(dsn = "//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/R_support_files",
layer = 'tl_2017_or_aiannh', integer64="warn.loss", verbose = FALSE)
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, tribal.lands, outside = TRUE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
}
return(stations)
}
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
library(rgdal)
#library(RODBC)
library(dplyr)
# devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
library(odeqstatusandtrends)
# devtools::install_github('donco/odeqassessment', host = 'https://api.github.com')
library(odeqassessment)
# devtools::install_github('rmichie/wqdb/wqdb', host = 'https://api.github.com')
library(wqdblite)
# devtools::install_github("TravisPritchardODEQ/AWQMSdata", host = "https://api.github.com")
library(AWQMSdata)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(tidyr)
library(htmltools)
library(captioner)
start.date = "2000-01-01"
end.date = "2019-01-01"
query_dates <- c(start.date, end.date)
name <- "Willamette"
project_dir <- paste0('//deqhq1/wqnps/Agriculture/Status_and_Trend_Analysis/', name, ' Basin/')
name <- "Mid-Coast"
project_dir <- paste0('//deqhq1/wqnps/Agriculture/Status_and_Trend_Analysis/', name, ' Basin/')
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/NHD/NHDH_ORDEQ/NHDH_ORDEQ.gdb",
layer = 'WBDHU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_Name %in% c("Siletz-Yaquina", "Alsea", "Siuslaw", "Siltcoos"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(clack_stations_AWQMS$HUC8)
polygon <- basin_shp
exclude.tribal.lands = TRUE
stations.channel.name = "STATIONS"
# Get Stations within station database
stations.channel <- RODBC::odbcConnect(stations.channel.name)
print("Retrieving all available stations from AWQMS...")
s.time <- Sys.time()
stations <- RODBC::sqlQuery(stations.channel, "SELECT * FROM VWStationsFinal", na.strings = "NA", stringsAsFactors=FALSE)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds"))
# Clip stations to input polygon
print("Clipping stations to your shapefile...")
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, polygon, outside = FALSE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
StationsInPoly(stations, polygon, outside = FALSE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum")
outside=FALSE
id_col="MLocID"
lat_col="Lat_DD"
lon_col="Long_DD"
datum_col="Datum"
# make a spatial object
df.shp <- stations[,c(id_col, datum_col, lat_col, lon_col)]
sp::coordinates(df.shp) <- c(lon_col, lat_col)
df.nad83 <- df.shp[!grepl("NAD27|4267|WGS84|4326",toupper(df.shp@data[,datum_col])), ]
df.nad27 <- df.shp[grepl("NAD27|4267",toupper(df.shp@data[,datum_col])), ]
df.wgs84 <- df.shp[grepl("WGS84|4326",toupper(df.shp@data[,datum_col])), ]
sp::proj4string(df.nad27) <- sp::CRS("+init=epsg:4267")
sp::proj4string(df.nad83) <- sp::CRS("+init=epsg:4269")
sp::proj4string(df.wgs84) <- sp::CRS("+init=epsg:4326")
# convert to NAD 83
if (nrow(df.nad27)>0) {
df.nad27.nad83 <- sp::spTransform(df.nad27, sp::CRS("+init=epsg:4269"))
df.nad83 <- rbind(df.nad83, df.nad27.nad83)
}
if (nrow(df.wgs84)>0) {
df.wgs84.nad83 <- sp::spTransform(df.wgs84, sp::CRS("+init=epsg:4269"))
df.nad83 <- rbind(df.nad83, df.wgs84.nad83)
}
poly.nad83 <- sp::spTransform(polygon, sp::CRS("+init=epsg:4269"))
View(polygon)
View(basin_shp)
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/NHD/NHDH_ORDEQ/NHDH_ORDEQ.gdb",
layer = 'WBDHU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$Name %in% c("Siletz-Yaquina", "Alsea", "Siuslaw", "Siltcoos"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(clack_stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
get_stations_WQP <- function(polygon, start_date, end_date, huc8, exclude.tribal.lands = TRUE) {
# Get Stations within WQP database
wqp_siteType = 'Estuary;Ocean;Stream;Lake, Reservoir, Impoundment'
wqp_hucs <- paste(huc8, collapse = ";")
wqp_enddate <- format(as.Date(end.date, format = "%Y-%m-%d"), "%m-%d-%Y")
s.time <- Sys.time()
stations <- dataRetrieval::whatWQPsites(huc = wqp_hucs, providers = "STORET", startDateLo = "11-01-2018",
startDateHi = wqp_enddate, siteType = wqp_siteType)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds"))
stations <- stations %>% dplyr::rename(OrgID = OrganizationIdentifier, MLocID = MonitoringLocationIdentifier,
StationDes = MonitoringLocationName, Lat_DD = LatitudeMeasure, Long_DD = LongitudeMeasure,
Datum = HorizontalCoordinateReferenceSystemDatumName)
stations <- stations %>% dplyr::filter(!OrgID == "OREGONDEQ")
# Clip stations to input polygon
print("Clipping stations to your shapefile...")
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, polygon, outside = FALSE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
if(exclude.tribal.lands){
print("Removing stations within tribal lands...")
tribal.lands <- rgdal::readOGR(dsn = "//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/R_support_files",
layer = 'tl_2017_or_aiannh', integer64="warn.loss", verbose = FALSE)
stations <- dplyr::filter(stations, MLocID %in% StationsInPoly(stations, tribal.lands, outside = TRUE,
id_col="MLocID", lat_col="Lat_DD",
lon_col="Long_DD", datum_col="Datum"))
}
return(stations)
}
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
setwd("//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends")
devtools::document()
devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
# devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
library(odeqstatusandtrends)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
GetData <- function(parameters = NULL, stations_AWQMS, stations_WQP, start.date, end.date, huc8,
query_nwis = FALSE, stations_NWIS, awqms.channel.name = "AWQMS") {
# Convert characteristic names
AWQMS.parms <- AWQMS_Char_Names(parameters)
if(any(AWQMS.parms == "Dissolved oxygen (DO)")){
AWQMS.parms <- unique(c(AWQMS.parms, "Dissolved oxygen saturation", "Temperature, water"))
}
#### Define sample media to query ####
sample.media <- 'Water'
print(paste('Querying the AWQMS database for data at', length(stations_AWQMS$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- AWQMSdata::AWQMS_Data(startdate = start.date,
enddate = end.date,
char = AWQMS.parms,
media = sample.media,
crit_codes = TRUE,
station = stations_AWQMS$MLocID)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
if(nrow(stations_WQP > 0)){
print(paste('Querying the Water Quality Portal for data at', length(stations_WQP$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- dataRetrieval::readWQPdata(statecode = "US:OR",
startDate = start.date,
endDate = end.date,
char = AWQMS.parms,
sampleMedia = sample.media,
siteType = wqp_siteType,
# crit_codes = TRUE,
station = stations_WQP$MLocID,
querySummary = TRUE)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
}
# Include only relevant monitoring location types
data_AWQMS <- data_AWQMS %>% filter(MonLocType %in% c("River/Stream", "Lake", "Other-Surface Water", ""))
# Attach location datum info to observations
data_AWQMS <- merge(data_AWQMS, stations_AWQMS[, c("MLocID", "Datum", "ELEV_Ft")], by="MLocID", all.x = TRUE, all.y = FALSE)
data_AWQMS[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID")] <-
stations_AWQMS[match(data_AWQMS$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID")]
if(query_nwis){
usgs_stations <- unique(stations_NWIS$site_no)
if("Temperature, water" %in% AWQMS.parms) {
usgs_parms <- c("00010")
}
if("Dissolved oxygen (DO)" %in% AWQMS.parms) {
usgs_parms <- c(usgs_parms, "00300", "00301")
}
print(paste('Querying the NWIS database for data at', length(usgs_stations), 'stations related to:',
paste(parameterCdFile[parameterCdFile$parameter_cd %in% usgs_parms,"parameter_nm"], collapse = ", ")))
s.time <- Sys.time()
data_NWIS <- dataRetrieval::readNWISdata(sites = usgs_stations,
startDt = start.date,
endDt = end.date,
siteType = c("ES", "LK", "SP", "ST", "ST-CA", "ST-DCH", "ST-TS", "WE"),
parameterCd = usgs_parms)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
data_NWIS <- merge(data_NWIS, attributes(data_NWIS)$siteInfo, by = c("site_no", "agency_cd"), all.x = TRUE, all.y = FALSE)
data_NWIS <- dplyr::rename(data_NWIS, Result_Numeric = X_00010_00001,
StationDes = station_nm,  OrganizationID = agency_cd, MLocID = site_no, SampleStartDate = dateTime,
SampleStartTZ = tz_cd, Lat_DD = dec_lat_va, Long_DD = dec_lon_va, Datum = srs, MonLocType = siteTypeCd,
HUC8 = hucCd)
data_NWIS <- dplyr::mutate(data_NWIS, Statistical_Base = "Maximum", Tesult_Type = "Calculated", Result_Unit = "deg C",
Char_Name = "Temperature, water", Activity_Type = "NWIS", SampleMedia = "Water",
SampleSubmedia = "Surface Water", Unit_UID = 246)
data_NWIS$SampleStartDate <- as.character(data_NWIS$SampleStartDate)
data_combined <- bind_rows(data_AWQMS, data_NWIS)
}
return(data_AWQMS)
}
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
GetData <- function(parameters = NULL, stations_AWQMS, stations_WQP, start.date, end.date, huc8,
query_nwis = FALSE, stations_NWIS, awqms.channel.name = "AWQMS") {
# Convert characteristic names
AWQMS.parms <- AWQMS_Char_Names(parameters)
if(any(AWQMS.parms == "Dissolved oxygen (DO)")){
AWQMS.parms <- unique(c(AWQMS.parms, "Dissolved oxygen saturation", "Temperature, water"))
}
#### Define sample media to query ####
sample.media <- 'Water'
print(paste('Querying the AWQMS database for data at', length(stations_AWQMS$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- AWQMSdata::AWQMS_Data(startdate = start.date,
enddate = end.date,
char = AWQMS.parms,
media = sample.media,
crit_codes = TRUE,
station = stations_AWQMS$MLocID)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
if(nrow(stations_WQP > 0)){
print(paste('Querying the Water Quality Portal for data at', length(stations_WQP$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- dataRetrieval::readWQPdata(statecode = "US:OR",
startDate = start.date,
endDate = end.date,
char = AWQMS.parms,
sampleMedia = sample.media,
siteType = wqp_siteType,
# crit_codes = TRUE,
station = stations_WQP$MLocID,
querySummary = TRUE)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
}
# Include only relevant monitoring location types
data_AWQMS <- data_AWQMS %>% filter(MonLocType %in% c("River/Stream", "Lake", "Other-Surface Water", ""))
# Attach location datum info to observations
data_AWQMS <- merge(data_AWQMS, stations_AWQMS[, c("MLocID", "Datum", "ELEV_Ft")], by="MLocID", all.x = TRUE, all.y = FALSE)
data_AWQMS[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID")] <-
stations_AWQMS[match(data_AWQMS$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID")]
if(query_nwis){
usgs_stations <- unique(stations_NWIS$site_no)
if("Temperature, water" %in% AWQMS.parms) {
usgs_parms <- c("00010")
}
if("Dissolved oxygen (DO)" %in% AWQMS.parms) {
usgs_parms <- c(usgs_parms, "00300", "00301")
}
print(paste('Querying the NWIS database for data at', length(usgs_stations), 'stations related to:',
paste(parameterCdFile[parameterCdFile$parameter_cd %in% usgs_parms,"parameter_nm"], collapse = ", ")))
s.time <- Sys.time()
data_NWIS <- dataRetrieval::readNWISdata(sites = usgs_stations,
startDt = start.date,
endDt = end.date,
siteType = c("ES", "LK", "SP", "ST", "ST-CA", "ST-DCH", "ST-TS", "WE"),
parameterCd = usgs_parms)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
data_NWIS <- merge(data_NWIS, attributes(data_NWIS)$siteInfo, by = c("site_no", "agency_cd"), all.x = TRUE, all.y = FALSE)
data_NWIS <- dplyr::rename(data_NWIS, Result_Numeric = X_00010_00001,
StationDes = station_nm,  OrganizationID = agency_cd, MLocID = site_no, SampleStartDate = dateTime,
SampleStartTZ = tz_cd, Lat_DD = dec_lat_va, Long_DD = dec_lon_va, Datum = srs, MonLocType = siteTypeCd,
HUC8 = hucCd)
data_NWIS <- dplyr::mutate(data_NWIS, Statistical_Base = "Maximum", Tesult_Type = "Calculated", Result_Unit = "deg C",
Char_Name = "Temperature, water", Activity_Type = "NWIS", SampleMedia = "Water",
SampleSubmedia = "Surface Water", Unit_UID = 246)
data_NWIS$SampleStartDate <- as.character(data_NWIS$SampleStartDate)
data_combined <- bind_rows(data_AWQMS, data_NWIS)
}
return(data_AWQMS)
}
stations_WQP = stations_wqp
if(nrow(stations_WQP > 0)){
print(paste('Querying the Water Quality Portal for data at', length(stations_WQP$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- dataRetrieval::readWQPdata(statecode = "US:OR",
startDate = start.date,
endDate = end.date,
char = AWQMS.parms,
sampleMedia = sample.media,
siteType = wqp_siteType,
# crit_codes = TRUE,
station = stations_WQP$MLocID,
querySummary = TRUE)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
}
GetData <- function(parameters = NULL, stations_AWQMS, stations_WQP, start.date, end.date, huc8,
query_nwis = FALSE, stations_NWIS, awqms.channel.name = "AWQMS") {
# Convert characteristic names
AWQMS.parms <- AWQMS_Char_Names(parameters)
if(any(AWQMS.parms == "Dissolved oxygen (DO)")){
AWQMS.parms <- unique(c(AWQMS.parms, "Dissolved oxygen saturation", "Temperature, water"))
}
#### Define sample media to query ####
sample.media <- 'Water'
print(paste('Querying the AWQMS database for data at', length(stations_AWQMS$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- AWQMSdata::AWQMS_Data(startdate = start.date,
enddate = end.date,
char = AWQMS.parms,
media = sample.media,
crit_codes = TRUE,
station = stations_AWQMS$MLocID)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
if(nrow(stations_WQP) > 0){
print(paste('Querying the Water Quality Portal for data at', length(stations_WQP$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- dataRetrieval::readWQPdata(statecode = "US:OR",
startDate = start.date,
endDate = end.date,
char = AWQMS.parms,
sampleMedia = sample.media,
siteType = wqp_siteType,
# crit_codes = TRUE,
station = stations_WQP$MLocID,
querySummary = TRUE)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
}
# Include only relevant monitoring location types
data_AWQMS <- data_AWQMS %>% filter(MonLocType %in% c("River/Stream", "Lake", "Other-Surface Water", ""))
# Attach location datum info to observations
data_AWQMS <- merge(data_AWQMS, stations_AWQMS[, c("MLocID", "Datum", "ELEV_Ft")], by="MLocID", all.x = TRUE, all.y = FALSE)
data_AWQMS[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID")] <-
stations_AWQMS[match(data_AWQMS$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID")]
if(query_nwis){
usgs_stations <- unique(stations_NWIS$site_no)
if("Temperature, water" %in% AWQMS.parms) {
usgs_parms <- c("00010")
}
if("Dissolved oxygen (DO)" %in% AWQMS.parms) {
usgs_parms <- c(usgs_parms, "00300", "00301")
}
print(paste('Querying the NWIS database for data at', length(usgs_stations), 'stations related to:',
paste(parameterCdFile[parameterCdFile$parameter_cd %in% usgs_parms,"parameter_nm"], collapse = ", ")))
s.time <- Sys.time()
data_NWIS <- dataRetrieval::readNWISdata(sites = usgs_stations,
startDt = start.date,
endDt = end.date,
siteType = c("ES", "LK", "SP", "ST", "ST-CA", "ST-DCH", "ST-TS", "WE"),
parameterCd = usgs_parms)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
data_NWIS <- merge(data_NWIS, attributes(data_NWIS)$siteInfo, by = c("site_no", "agency_cd"), all.x = TRUE, all.y = FALSE)
data_NWIS <- dplyr::rename(data_NWIS, Result_Numeric = X_00010_00001,
StationDes = station_nm,  OrganizationID = agency_cd, MLocID = site_no, SampleStartDate = dateTime,
SampleStartTZ = tz_cd, Lat_DD = dec_lat_va, Long_DD = dec_lon_va, Datum = srs, MonLocType = siteTypeCd,
HUC8 = hucCd)
data_NWIS <- dplyr::mutate(data_NWIS, Statistical_Base = "Maximum", Tesult_Type = "Calculated", Result_Unit = "deg C",
Char_Name = "Temperature, water", Activity_Type = "NWIS", SampleMedia = "Water",
SampleSubmedia = "Surface Water", Unit_UID = 246)
data_NWIS$SampleStartDate <- as.character(data_NWIS$SampleStartDate)
data_combined <- bind_rows(data_AWQMS, data_NWIS)
}
return(data_AWQMS)
}
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
devtools::install_github('rmichie/wqdb/wqdb', host = 'https://api.github.com')
unique(clack_data_raw$Org_Name)
unique(clack_data_raw$OrganizationID)
# devtools::install_github('rmichie/wqdb/wqdb', host = 'https://api.github.com')
library(wqdb)
data_raw <- clack_data_raw %>% filter(OrganizationID != "USGS-OR(INTERNAL)")
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-Mid-Coast/')
wq_db <- paste0(project_dir, name,"_data_raw_",paste0(query_dates, collapse = "."),".db")
# create_wq_db(wq_db)
wqdb::write_wqdb(db = wq_db, awqms = clack_data_raw, stations = clack_stations_AWQMS)
wqdb::awqms_cols()
colnames(clack_data_raw)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
data_raw <- data_raw %>% filter(OrganizationID != "USGS-OR(INTERNAL)")
