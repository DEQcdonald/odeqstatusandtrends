str(data$sample_datetime)
xtsible(data)
as.xts(data)
as.xts.methods()
as.xts(data[,c("sample_datetime", "Result.Numeric")])
as.xts(data[,c("sample_datetime", "Result_Numeric")])
xtsible(data[,c("sample_datetime", "Result_Numeric")])
as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$Result_Numeric)
as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$sample_datetime)
data_ts <- as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$sample_datetime)
trend <- trend::smk.test(data_ts)
data_ts <- as.ts(data_ts)
View(data_ts)
View(data)
trend <- trend::smk.test(data_ts)
frequency(data_ts)
trend_stns <- function(data, trend_years = c(format(min(data$sample_datetime), "%Y"):format(Sys.Date(), "%Y"))) {
if(length(trend.years) < 8){break("Number of years should be less than or equal to 8")}
data$year <- lubridate::year(data$sample_datetime)
if(any(unique(data$year) %in% trend_years)){
trend_check <- data %>%
filter(year %in% trend_years) %>%
dplyr::group_by(MLocID, Char_Name) %>%
dplyr::summarise(n_years = length(unique(year))) %>%
filter(n_years>=8)
print(paste("Data may be sufficient for", NROW(trend_check), "different trends to be determined."))
} else {
trend_check <- "No stations meet trend year criteria"
print(trend_check)
}
return(status_check)
}
trend_stns(clack_data)
trend_stns <- function(data, trend_years = c(format(min(data$sample_datetime), "%Y"):format(Sys.Date(), "%Y"))) {
if(length(trend_years) < 8){break("Number of years should be less than or equal to 8")}
data$year <- lubridate::year(data$sample_datetime)
if(any(unique(data$year) %in% trend_years)){
trend_check <- data %>%
filter(year %in% trend_years) %>%
dplyr::group_by(MLocID, Char_Name) %>%
dplyr::summarise(n_years = length(unique(year))) %>%
filter(n_years>=8)
print(paste("Data may be sufficient for", NROW(trend_check), "different trends to be determined."))
} else {
trend_check <- "No stations meet trend year criteria"
print(trend_check)
}
return(status_check)
}
trend_stns(clack_data)
trend_stns <- function(data, trend_years = c(format(min(data$sample_datetime), "%Y"):format(Sys.Date(), "%Y"))) {
if(length(trend_years) < 8){break("Number of years should be less than or equal to 8")}
data$year <- lubridate::year(data$sample_datetime)
if(any(unique(data$year) %in% trend_years)){
trend_check <- data %>%
filter(year %in% trend_years) %>%
dplyr::group_by(MLocID, Char_Name) %>%
dplyr::summarise(n_years = length(unique(year))) %>%
filter(n_years>=8)
print(paste("Data may be sufficient for", NROW(trend_check), "different trends to be determined."))
} else {
trend_check <- "No stations meet trend year criteria"
print(trend_check)
}
return(trend_check)
}
trend_stns(clack_data)
unique(year(clack_data$sample_datetime))
lubridate::year()
unique(lubridate::year(clack_data$sample_datetime))
length(unique(lubridate::year(clack_data$sample_datetime)))
trend_stns <- function(data, trend_years = c(format(min(data$sample_datetime), "%Y"):format(Sys.Date(), "%Y"))) {
if(length(trend_years) < 8){break("Number of years should be less than or equal to 8")}
data$year <- lubridate::year(data$sample_datetime)
if(any(unique(data$year) %in% trend_years)){
trend_check <- data %>%
filter(year %in% trend_years) %>%
dplyr::group_by(MLocID, Char_Name) %>%
dplyr::summarise(n_years = length(unique(year)),
avg_obs = n()/n_years) %>%
filter(n_years>=8)
print(paste("Data may be sufficient for", NROW(trend_check), "different trends to be determined."))
} else {
trend_check <- "No stations meet trend year criteria"
print(trend_check)
}
return(trend_check)
}
trend_stns(clack_data)
trend <- trend_stns(clack_data)
trend_stns <- function(data, trend_years = c(format(min(data$sample_datetime), "%Y"):format(Sys.Date(), "%Y"))) {
if(length(trend_years) < 8){break("Number of years should be less than or equal to 8")}
data$year <- lubridate::year(data$sample_datetime)
if(any(unique(data$year) %in% trend_years)){
trend_check <- data %>%
filter(year %in% trend_years) %>%
dplyr::group_by(MLocID, Char_Name) %>%
dplyr::summarise(n_years = length(unique(year)),
avg_obs = n()/n_years,
min_year = min(year),
max_year = max(year)) %>%
filter(n_years>=8)
print(paste("Data may be sufficient for", NROW(trend_check), "different trends to be determined."))
} else {
trend_check <- "No stations meet trend year criteria"
print(trend_check)
}
return(trend_check)
}
trend <- trend_stns(clack_data)
View(trend)
data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == trend$MLocID[1])
data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == filter(trend, Char_Name == "Temperature, water")$MLocID[1])
data_ts <- as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$sample_datetime)
data_ts <- as.ts(data_ts)
trend <- trend::smk.test(data_ts)
frequency(data_ts)
View(data_ts)
zoo::frequency(data_ts)
str(data_ts)
data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == filter(trend, Char_Name == "Temperature, water")$MLocID[1])
data_ts <- as.ts(data[,c("sample_datetime", "Result_Numeric")])
View(data_ts)
trend <- trend::smk.test(data_ts)
data_ts <- as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$sample_datetime)
frequency(data_ts)
data_ts <- ts(data_ts)
data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == filter(trend, Char_Name == "Temperature, water")$MLocID[1])
data_ts <- as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$sample_datetime)
data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == filter(trend, Char_Name == "Temperature, water")$MLocID[1])
data_ts <- ts(data[,c("sample_datetime", "Result_Numeric")])
data_ts <- ts(data[,c("sample_datetime", "Result_Numeric")], frequency = 12)
trend <- trend::smk.test(data_ts)
View(trend)
View(data_ts)
library(rgdal)
library(RODBC)
library(dplyr)
# library(odeqstatusandtrends)
library(AWQMSdata)
library(dataRetrieval)
library(ggplot2)
start.date = "2000-01-01"
end.date = "2019-01-01"
Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME == "Clackamas", ]
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/Locations.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/AWQMS_Char_Names.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/CleanData.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/AddCriteria.R', echo=TRUE)
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH")
stations_AWQMS = clack_stations_AWQMS
start.date = start.date
end.date = end.date
clack_data <- CleanData(data_AWQMS)
awqms.channel.name = "AWQMS"
# Convert characteristic names
AWQMS.parms <- AWQMS_Char_Names(parameters)
#### Define sample media to query ####
sample.media <- 'Water'
print(paste('Querying the AWQMS database for data at', length(stations_AWQMS$MLocID), 'stations related to:', paste(parameters, collapse = ", ")))
s.time <- Sys.time()
data_AWQMS <- AWQMSdata::AWQMS_Data(startdate = start.date,
enddate = end.date,
char = AWQMS.parms,
media = sample.media,
crit_codes = TRUE,
station = stations_AWQMS$MLocID)
e.time <- Sys.time()
print(paste("This query took approximately", difftime(e.time, s.time, units = "secs"), "seconds."))
data_AWQMS <- data_AWQMS %>% filter(MonLocType %in% c("River/Stream", "Lake", "Other-Surface Water", ""))
data_AWQMS <- merge(data_AWQMS, stations_AWQMS[, c("MLocID", "Datum")], by="MLocID", all.x = TRUE, all.y = FALSE)
clack_data <- CleanData(data_AWQMS)
clack_data <- add_criteria(clack_data)
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_ph <- clack_data %>% filter(Char_Name == "pH")
clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data <- bind_rows(clack_data_temp, clack_data_ph)
status <- status_stns(clack_data)
trend <- trend_stns(clack_data)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/status_stns.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/trend_stns.R', echo=TRUE)
status <- status_stns(clack_data)
trend <- trend_stns(clack_data)
data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == filter(trend, Char_Name == "Temperature, water")$MLocID[1])
data_ts <- as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$sample_datetime)
# data_ts <- as.xts(data[,c("sample_datetime", "Result_Numeric")], order.by = data$sample_datetime)
data_ts <- ts(data[,c("sample_datetime", "Result_Numeric")], frequency = 12)
data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == filter(trend, Char_Name == "Temperature, water")$MLocID[1])
install.packages("EnvStats")
View(data)
data$Month <- lubridate::month(data$sample_datetime)
data$Year <- lubridate::year(data$sample_datetime)
seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = data)
View(seaKen)
seaKen$sample.size
seaKen$p.value
seaKen$interval$conf.level
data <- clack_data %>% filter(MLocID %in% trend$MLocID)
data$Month <- lubridate::month(data$sample_datetime)
data$Year <- lubridate::year(data$sample_datetime)
seaKen <- data.frame()
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == i)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
seaKen <- bind_rows(seaKen, tmp_seaKen)
}
}
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
seaKen <- bind_rows(seaKen, tmp_seaKen)
}
}
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
tmp_seaKen$interval
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
df_seaKen <- data.frame(MLocID = i, Char_Name = j, Confidence = tmp_seaKen$interval$conf.level)
seaKen <- bind_rows(seaKen, df_seaKen)
}
}
View(seaKen)
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
print(tmp_seaKen$sample.size)
df_seaKen <- data.frame(MLocID = i, Char_Name = j, Confidence = tmp_seaKen$interval$conf.level)
seaKen <- bind_rows(seaKen, df_seaKen)
}
}
tmp_seaKen$estimate
tmp_seaKen$seasonal.estimates
attributes(tmp_seaKen)
attributes(tmp_seaKen$estimate)
attributes(tmp_seaKen$estimate)$slope
tmp_seaKen$estimate$slope
seaKen <- data.frame()
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
print(tmp_seaKen$sample.size)
df_seaKen <- data.frame(MLocID = i,
Char_Name = j,
confidence = tmp_seaKen$interval$conf.level,
slope = tmp_seaKen$estimate[2])
seaKen <- bind_rows(seaKen, df_seaKen)
}
}
View(seaKen)
seaKen <- data.frame()
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
print(tmp_seaKen$sample.size)
df_seaKen <- data.frame(MLocID = i,
Char_Name = j,
p_value = tmp_seaKen$p.value[1]
confidence = tmp_seaKen$interval$conf.level,
slope = tmp_seaKen$estimate[2])
seaKen <- bind_rows(seaKen, df_seaKen)
}
}
seaKen <- data.frame()
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
print(tmp_seaKen$sample.size)
df_seaKen <- data.frame(MLocID = i,
Char_Name = j,
p_value = tmp_seaKen$p.value[1],
confidence = tmp_seaKen$interval$conf.level,
slope = tmp_seaKen$estimate[2])
seaKen <- bind_rows(seaKen, df_seaKen)
}
}
View(seaKen)
seaKen <- data.frame()
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
print(tmp_seaKen$sample.size)
df_seaKen <- data.frame(MLocID = i,
Char_Name = j,
p_value = tmp_seaKen$p.value[1],
confidence = tmp_seaKen$interval$conf.level,
slope = tmp_seaKen$estimate[2],
intercept = tmp_seaKen$estimate[3])
seaKen <- bind_rows(seaKen, df_seaKen)
}
}
seaKen <- sea_ken(filter(clack_data, MLocID %in% trend$MLocID))
sea_ken <- function(data){
data$Month <- lubridate::month(data$sample_datetime)
data$Year <- lubridate::year(data$sample_datetime)
sea_ken_df <- data.frame()
sample_size <- data.frame()
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
tmp_sample_size <- tmp_seaKen$sample.size
stn_seaKen <- data.frame(MLocID = i,
Char_Name = j,
p_value = tmp_seaKen$p.value[1],
confidence = tmp_seaKen$interval$conf.level,
slope = tmp_seaKen$estimate[2],
intercept = tmp_seaKen$estimate[3])
sample_size_df <- bind_rows(sample_size, tmp_sample_size)
sea_ken_df <- bind_rows(seaKen, stn_seaKen)
}
}
attr(sea_ken_df, "sample_size") <- sample_size_df
return(sea_ken_df)
}
seaKen <- sea_ken(filter(clack_data, MLocID %in% trend$MLocID))
View(seaKen)
attributes(seaKen)
attributes(seaKen)$sample_size
sea_ken <- function(data){
data$Month <- lubridate::month(data$sample_datetime)
data$Year <- lubridate::year(data$sample_datetime)
sea_ken_df <- data.frame()
sample_size <- data.frame()
for(j in unique(data$Char_Name)){
print(j)
subData <- filter(data, Char_Name == j)
for(i in unique(subData$MLocID)){
print(i)
tmp_seaKen <- EnvStats::kendallSeasonalTrendTest(Result_Numeric ~ Month + Year, data = subData)
tmp_sample_size <- tmp_seaKen$sample.size
stn_seaKen <- data.frame(MLocID = i,
Char_Name = j,
p_value = tmp_seaKen$p.value[1],
confidence = tmp_seaKen$interval$conf.level,
slope = tmp_seaKen$estimate[2],
intercept = tmp_seaKen$estimate[3])
sample_size <- bind_rows(sample_size, tmp_sample_size)
sea_ken_df <- bind_rows(seaKen, stn_seaKen)
}
}
attr(sea_ken_df, "sample_size") <- sample_size
return(sea_ken_df)
}
seaKen <- sea_ken(filter(clack_data, MLocID %in% trend$MLocID))
library(rgdal)
library(RODBC)
library(dplyr)
# library(odeqstatusandtrends)
library(AWQMSdata)
library(dataRetrieval)
library(ggplot2)
start.date = "2000-01-01"
end.date = "2019-01-01"
Name <- "Clackamas"
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME == "Clackamas", ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/Locations.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/AWQMS_Char_Names.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/GetData.R', echo=TRUE)
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/CleanData.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/AddCriteria.R', echo=TRUE)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/AddCriteria.R', echo=TRUE)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
df <- clack_data
pH_summary <- df %>%
mutate(pH_violation = ifelse(Result_cen < pH_Min | Result_cen > pH_Max, 1, 0 ),
pH_violation_high = ifelse(Result_cen > pH_Max, 1, 0 ),
pH_violation_low = ifelse(Result_cen < pH_Min, 1, 0 )
)
devtools::install_github("https://github.com/TravisPritchardODEQ/IR2018/tree/master/IRlibrary")
colnames(df)
AWQMS_Data(station = "40475")
AWQMS_Data(startdate = "2000-01-01", station = "40475")
AWQMS_Data(startdate = "2000-01-01", enddate = "2019-01-01", station = "40475")
AWQMS_Data(startdate = "2000-01-01", enddate = "2019-01-01", station = "40475-ORDEQ")
getwd()
setwd("//deqhq1/wqnps/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends")
getwd()
document()
library(roxygen2)
document()
devtools
devtools::document()
Censored_data <- function(df, res= `IRResultNWQSunit`, resqual = `Result_Operator`, crit = `crit`) {
res =  enquo(res)
resqual = enquo(resqual)
crit  = enquo(crit)
# Perform censored data modifications
Results_censored <- df %>%
# Get lowest criteria value to set censored results
mutate(Result_cen = ifelse(Result_Operator == "=", as.numeric(Result_Numeric),
ifelse(Result_Operator == ">", as.numeric(Result_Numeric),
ifelse(Result_Operator == "<", ifelse(UQ(res) > as.numeric(UQ(crit)), 0.5 * as.numeric(UQ(crit)) , 0.5 * as.numeric(UQ(res)) ), "ER" )))) %>%
mutate(Result_cen = as.numeric(Result_cen))
return(Results_censored)
}
Censored_data <- function(df, results = `IRResultNWQSunit`, results_qualifier = `Result_Operator`, criteria = `crit`) {
res =  enquo(res)
resqual = enquo(resqual)
crit  = enquo(crit)
# Perform censored data modifications
Results_censored <- df %>%
# Get lowest criteria value to set censored results
mutate(Result_cen = ifelse(Result_Operator == "=", as.numeric(Result_Numeric),
ifelse(Result_Operator == ">", as.numeric(Result_Numeric),
ifelse(Result_Operator == "<", ifelse(UQ(res) > as.numeric(UQ(crit)), 0.5 * as.numeric(UQ(crit)) , 0.5 * as.numeric(UQ(res)) ), "ER" )))) %>%
mutate(Result_cen = as.numeric(Result_cen))
return(Results_censored)
}
View(clack_data_raw)
View(clack_data)
Censored_data(clack_data[clack_data$Char_Name == "Temperature, water"], results = `Result_Numeric`, results_qualifier = `Result_Qualifier`, criteria = `temp_crit`)
Censored_data <- function(df, results = `IRResultNWQSunit`, results_qualifier = `Result_Operator`, criteria = `crit`) {
res =  enquo(results)
resqual = enquo(results_qualifier)
crit  = enquo(criteria)
# Perform censored data modifications
Results_censored <- df %>%
# Get lowest criteria value to set censored results
mutate(Result_cen = ifelse(resqual == "=", as.numeric(res),
ifelse(resqual == ">", as.numeric(res),
ifelse(resqual == "<", ifelse(UQ(res) > as.numeric(UQ(crit)), 0.5 * as.numeric(UQ(crit)) , 0.5 * as.numeric(UQ(res)) ), "ER" )))) %>%
mutate(Result_cen = as.numeric(Result_cen))
return(Results_censored)
}
Censored_data(clack_data[clack_data$Char_Name == "Temperature, water"], results = `Result_Numeric`, results_qualifier = `Result_Qualifier`, criteria = `temp_crit`)
Censored_data(clack_data[clack_data$Char_Name == "Temperature, water",], results = `Result_Numeric`, results_qualifier = `Result_Qualifier`, criteria = `temp_crit`)
res
results = `IRResultNWQSunit`
results = `Result_Numeric`
enquo(result)
enquo('result')
results = "IRResultNWQSunit"
results
UQ(results)
enquote(results)
quote(results)
!!results
mutate(clack_data, x = !!results)
results = "Result_Numeric"
mutate(clack_data, x = !!results)
mutate(clack_data, x = results)
mutate(clack_data, x := results)
results = as.symbol(results)
mutate(clack_data, x = results)
mutate(clack_data, x = !!results)
??UQ
results = "Result_Numeric"
mutate(clack_data, x = !!results)
Censored_data <- function(df, results = "Result_Numeric", results_qualifier = "Result_Operator", criteria = "crit") {
results = as.symbol(results)
results_qualifier = as.symbol(results_qualifier)
criteria  = as.symbol(criteria)
# Perform censored data modifications
Results_censored <- df %>%
# Get lowest criteria value to set censored results
mutate(Result_cen = ifelse(!!results_qualifier == "=", as.numeric(!!results),
ifelse(!!results_qualifier == ">", as.numeric(!!results),
ifelse(!!results_qualifier == "<", ifelse(!!results > as.numeric(!!criteria), 0.5 * as.numeric(!!criteria) , 0.5 * as.numeric(!!results) ), "ER" )))) %>%
mutate(Result_cen = as.numeric(Result_cen))
return(Results_censored)
}
Censored_data(clack_data[clack_data$Char_Name == "Temperature, water",], results = 'Result_Numeric', results_qualifier = 'Result_Qualifier', criteria = 'temp_crit')
Censored_data(clack_data[clack_data$Char_Name == "Temperature, water",], results = 'Result_Numeric', results_qualifier = 'Result_Operator', criteria = 'temp_crit')
