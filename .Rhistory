c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
au_names <- read.csv('//deqhq1/WQNPS/Status_and_Trend_Reports/Lookups_Statewide/AssessmentUnits_OR_Dissolve.txt')
stations_AWQMS$AU_Name <- au_names[match(stations_AWQMS$AU_ID, au_names$AU_ID),
c("AU_Name")]
# Clean data and add criteria ---------------------------------------------
data <- CleanData(data_raw)
data <- add_criteria(data)
# Assess various parameters -----------------------------------------------
data_pH <- data %>% filter(Char_Name == "pH")
data_pH <- Censored_data(data_pH, criteria = 'pH_Min')
data_pH <- odeqassessment::pH_assessment(data_pH)
data_temp <- data %>% filter(Char_Name == "Temperature, water", Statistical_Base == "7DADM")
data_temp <- Censored_data(data_temp, criteria = "temp_crit")
data_temp <- odeqassessment::temp_assessment(data_temp)
data_TP <- data %>% filter(Char_Name == "Phosphate-phosphorus")
data_TP$TP_crit <- NA
data_TP <- Censored_data(data_TP, criteria = "TP_crit")
data_TP <- TP_assessment(data_TP)
data_TSS <- data %>% filter(Char_Name == "Total suspended solids")
data_TSS$TSS_crit <- NA
data_TSS <- Censored_data(data_TSS, criteria = "TSS_crit")
data_TSS <- TSS_assessment(data_TSS)
data_bact <- data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
data_bact <- data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
data_bact <- Censored_data(data_bact, criteria = "bact_crit_min")
data_ent <- Coastal_Contact_rec(data_bact)
data_eco <- Fresh_Contact_rec(data_bact)
data_shell <- Shell_Harvest(data_bact)
data_bact <- bind_rows(data_ent, data_eco, data_shell)
data_DO <- data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
data_DO <- Censored_data(data_DO, criteria = "DO_crit_min")
data_DO <- DO_assessment(data_DO)
data_assessed <- bind_rows(data_temp,
data_pH,
data_TP,
data_TSS,
data_eco,
data_DO)
# Assess status by parameter ----------------------------------------------
pH_status <- status_stns(data_pH)
temp_status <- status_stns(data_temp)
TP_status <- status_stns(data_TP)
TSS_status <- status_stns(data_TSS)
bact_status <- status_stns(data_bact)
DO_status <- status_stns(data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(data_pH)
temp_trend <- trend_stns(data_temp)
TP_trend <- trend_stns(data_TP)
TSS_trend <- trend_stns(data_TSS)
bact_trend <- trend_stns(data_bact)
DO_trend <- trend_stns(data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
save(status, trend, stations_AWQMS, file = paste0(project_dir, name, "_seaken_inputs.RData"))
# Assess trends -----------------------------------------------------------
seaKen <- sea_ken(dplyr::filter(data_assessed, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
# Create summary table ------------------------------------------------------
param_sum_stn <- parameter_summary_by_station(status, seaKen, stations_AWQMS)
param_sum_au <- parameter_summary_by_au(status, seaKen, stations_AWQMS)
write.csv(param_sum_stn, paste0(project_dir, name, "_param_summary_by_station.csv"), row.names = FALSE)
write.csv(param_sum_au, paste0(project_dir, name, "_param_summary_by_AU.csv"), row.names = FALSE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"),
title = paste(name, "Status and Trends Map"),
background = "grey", selfcontained = FALSE)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"),
title = paste(name, "Status and Trends Map"),
background = "grey", selfcontained = FALSE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
View(param_sum_au)
View(param_sum_stn)
map
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"),
title = paste(name, "Status and Trends Map"),
background = "grey", selfcontained = FALSE)
name <- "LongTomMonroe-NWQI"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
# gis_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/GIS'
gis_dir <- '//deqhq1/dwp-public/SpecialProjects/NRCS_NWQI'
# basin_shp <- readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
basin_shp <- readOGR(dsn = gis_dir, layer = 'LongTomMonroeNWQI_3HUC12s_dissolve', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
save(data_raw, file = paste0(project_dir, name, "_data_raw_", start.date, "-", end.date, ".RData"))
# # create_wq_db(wq_db)
# wqdb::write_wqdb(db = wq_db, awqms = data_raw, stations = stations_AWQMS)
#
# # read all the data back
# data_raw <- read_wqdb(db = wq_db, table="vw_discrete", startdate = start.date, enddate=end.date, huc8 = hucs)
# Attach location datum info to observations
# data_raw <- merge(data_raw[,c(-(141:149))],
#                   stations_AWQMS[, c("MLocID", "Datum", "ELEV_Ft")],
#                   by="MLocID", all.x = TRUE, all.y = FALSE)
data_raw[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", 141:149)] <-
stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
au_names <- read.csv('//deqhq1/WQNPS/Status_and_Trend_Reports/Lookups_Statewide/AssessmentUnits_OR_Dissolve.txt')
stations_AWQMS$AU_Name <- au_names[match(stations_AWQMS$AU_ID, au_names$AU_ID),
c("AU_Name")]
# Clean data and add criteria ---------------------------------------------
data <- CleanData(data_raw)
data <- add_criteria(data)
# Assess various parameters -----------------------------------------------
data_pH <- data %>% filter(Char_Name == "pH")
data_pH <- Censored_data(data_pH, criteria = 'pH_Min')
data_pH <- odeqassessment::pH_assessment(data_pH)
data_temp <- data %>% filter(Char_Name == "Temperature, water", Statistical_Base == "7DADM")
data_temp <- Censored_data(data_temp, criteria = "temp_crit")
data_temp <- odeqassessment::temp_assessment(data_temp)
data_TP <- data %>% filter(Char_Name == "Phosphate-phosphorus")
data_TP$TP_crit <- NA
data_TP <- Censored_data(data_TP, criteria = "TP_crit")
data_TP <- TP_assessment(data_TP)
data_TSS <- data %>% filter(Char_Name == "Total suspended solids")
data_TSS$TSS_crit <- NA
data_TSS <- Censored_data(data_TSS, criteria = "TSS_crit")
data_TSS <- TSS_assessment(data_TSS)
data_bact <- data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
data_bact <- data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
data_bact <- Censored_data(data_bact, criteria = "bact_crit_min")
data_ent <- Coastal_Contact_rec(data_bact)
data_eco <- Fresh_Contact_rec(data_bact)
data_shell <- Shell_Harvest(data_bact)
data_bact <- bind_rows(data_ent, data_eco, data_shell)
data_DO <- data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
data_DO <- Censored_data(data_DO, criteria = "DO_crit_min")
data_DO <- DO_assessment(data_DO)
data_assessed <- bind_rows(data_temp,
data_pH,
data_TP,
data_TSS,
data_eco,
data_DO)
# Assess status by parameter ----------------------------------------------
pH_status <- status_stns(data_pH)
temp_status <- status_stns(data_temp)
TP_status <- status_stns(data_TP)
TSS_status <- status_stns(data_TSS)
bact_status <- status_stns(data_bact)
DO_status <- status_stns(data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(data_pH)
temp_trend <- trend_stns(data_temp)
TP_trend <- trend_stns(data_TP)
TSS_trend <- trend_stns(data_TSS)
bact_trend <- trend_stns(data_bact)
DO_trend <- trend_stns(data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
save(status, trend, stations_AWQMS, file = paste0(project_dir, name, "_seaken_inputs.RData"))
# Assess trends -----------------------------------------------------------
seaKen <- sea_ken(dplyr::filter(data_assessed, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
# Create summary table ------------------------------------------------------
param_sum_stn <- parameter_summary_by_station(status, seaKen, stations_AWQMS)
param_sum_au <- parameter_summary_by_au(status, seaKen, stations_AWQMS)
write.csv(param_sum_stn, paste0(project_dir, name, "_param_summary_by_station.csv"), row.names = FALSE)
write.csv(param_sum_au, paste0(project_dir, name, "_param_summary_by_AU.csv"), row.names = FALSE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"),
title = paste(name, "Status and Trends Map"),
background = "grey", selfcontained = FALSE)
name <- "Rogue-NWQI"
name <- "Rogue-NWQI"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
# gis_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/GIS'
gis_dir <- '//deqhq1/dwp-public/SpecialProjects/NRCS_NWQI'
# basin_shp <- readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
basin_shp <- readOGR(dsn = gis_dir, layer = 'Rogue_6HUC12s_RRWC_19JUL201_dissolve9', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
save(data_raw, file = paste0(project_dir, name, "_data_raw_", start.date, "-", end.date, ".RData"))
data_raw[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", 141:149)] <-
stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
au_names <- read.csv('//deqhq1/WQNPS/Status_and_Trend_Reports/Lookups_Statewide/AssessmentUnits_OR_Dissolve.txt')
stations_AWQMS$AU_Name <- au_names[match(stations_AWQMS$AU_ID, au_names$AU_ID),
c("AU_Name")]
# Clean data and add criteria ---------------------------------------------
data <- CleanData(data_raw)
data <- add_criteria(data)
# Assess various parameters -----------------------------------------------
data_pH <- data %>% filter(Char_Name == "pH")
data_pH <- Censored_data(data_pH, criteria = 'pH_Min')
data_pH <- odeqassessment::pH_assessment(data_pH)
data_temp <- data %>% filter(Char_Name == "Temperature, water", Statistical_Base == "7DADM")
data_temp <- Censored_data(data_temp, criteria = "temp_crit")
data_temp <- odeqassessment::temp_assessment(data_temp)
data_TP <- data %>% filter(Char_Name == "Phosphate-phosphorus")
data_TP$TP_crit <- NA
data_TP <- Censored_data(data_TP, criteria = "TP_crit")
data_TP <- TP_assessment(data_TP)
data_TSS <- data %>% filter(Char_Name == "Total suspended solids")
data_TSS$TSS_crit <- NA
data_TSS <- Censored_data(data_TSS, criteria = "TSS_crit")
data_TSS <- TSS_assessment(data_TSS)
data_bact <- data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
data_bact <- data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
data_bact <- Censored_data(data_bact, criteria = "bact_crit_min")
data_ent <- Coastal_Contact_rec(data_bact)
data_eco <- Fresh_Contact_rec(data_bact)
data_shell <- Shell_Harvest(data_bact)
data_bact <- bind_rows(data_ent, data_eco, data_shell)
data_DO <- data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
data_DO <- Censored_data(data_DO, criteria = "DO_crit_min")
data_DO <- DO_assessment(data_DO)
data_assessed <- bind_rows(data_temp,
data_pH,
data_TP,
data_TSS,
data_eco,
data_DO)
# Assess status by parameter ----------------------------------------------
pH_status <- status_stns(data_pH)
temp_status <- status_stns(data_temp)
TP_status <- status_stns(data_TP)
TSS_status <- status_stns(data_TSS)
bact_status <- status_stns(data_bact)
DO_status <- status_stns(data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(data_pH)
temp_trend <- trend_stns(data_temp)
TP_trend <- trend_stns(data_TP)
TSS_trend <- trend_stns(data_TSS)
bact_trend <- trend_stns(data_bact)
DO_trend <- trend_stns(data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
save(status, trend, stations_AWQMS, file = paste0(project_dir, name, "_seaken_inputs.RData"))
# Assess trends -----------------------------------------------------------
seaKen <- sea_ken(dplyr::filter(data_assessed, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
# Create summary table ------------------------------------------------------
param_sum_stn <- parameter_summary_by_station(status, seaKen, stations_AWQMS)
param_sum_au <- parameter_summary_by_au(status, seaKen, stations_AWQMS)
write.csv(param_sum_stn, paste0(project_dir, name, "_param_summary_by_station.csv"), row.names = FALSE)
write.csv(param_sum_au, paste0(project_dir, name, "_param_summary_by_AU.csv"), row.names = FALSE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"),
title = paste(name, "Status and Trends Map"),
background = "grey", selfcontained = FALSE)
name <- "Santiam-NWQI"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
# gis_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/GIS'
gis_dir <- '//deqhq1/dwp-public/SpecialProjects/NRCS_NWQI'
# wq_db <- paste0(project_dir, name,"_data_raw_",paste0(query_dates, collapse = "."),".db")
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
# basin_shp <- readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
basin_shp <- readOGR(dsn = gis_dir, layer = 'SantiamNWQIProposedArea_12HUCs_19JUL2019_dissolve', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# basin_shp <- basin_shp[basin_shp$REPORT %in% c(name), ]
# hucs <- unique(basin_shp$HUC_8)
stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
save(data_raw, file = paste0(project_dir, name, "_data_raw_", start.date, "-", end.date, ".RData"))
# # create_wq_db(wq_db)
# wqdb::write_wqdb(db = wq_db, awqms = data_raw, stations = stations_AWQMS)
#
# # read all the data back
# data_raw <- read_wqdb(db = wq_db, table="vw_discrete", startdate = start.date, enddate=end.date, huc8 = hucs)
# Attach location datum info to observations
# data_raw <- merge(data_raw[,c(-(141:149))],
#                   stations_AWQMS[, c("MLocID", "Datum", "ELEV_Ft")],
#                   by="MLocID", all.x = TRUE, all.y = FALSE)
data_raw[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", 141:149)] <-
stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
au_names <- read.csv('//deqhq1/WQNPS/Status_and_Trend_Reports/Lookups_Statewide/AssessmentUnits_OR_Dissolve.txt')
stations_AWQMS$AU_Name <- au_names[match(stations_AWQMS$AU_ID, au_names$AU_ID),
c("AU_Name")]
# Clean data and add criteria ---------------------------------------------
data <- CleanData(data_raw)
data <- add_criteria(data)
# Assess various parameters -----------------------------------------------
data_pH <- data %>% filter(Char_Name == "pH")
data_pH <- Censored_data(data_pH, criteria = 'pH_Min')
data_pH <- odeqassessment::pH_assessment(data_pH)
data_temp <- data %>% filter(Char_Name == "Temperature, water", Statistical_Base == "7DADM")
data_temp <- Censored_data(data_temp, criteria = "temp_crit")
data_temp <- odeqassessment::temp_assessment(data_temp)
data_TP <- data %>% filter(Char_Name == "Phosphate-phosphorus")
data_TP$TP_crit <- NA
data_TP <- Censored_data(data_TP, criteria = "TP_crit")
data_TP <- TP_assessment(data_TP)
data_TSS <- data %>% filter(Char_Name == "Total suspended solids")
data_TSS$TSS_crit <- NA
data_TSS <- Censored_data(data_TSS, criteria = "TSS_crit")
data_TSS <- TSS_assessment(data_TSS)
data_bact <- data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
data_bact <- data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
data_bact <- Censored_data(data_bact, criteria = "bact_crit_min")
data_ent <- Coastal_Contact_rec(data_bact)
data_eco <- Fresh_Contact_rec(data_bact)
data_shell <- Shell_Harvest(data_bact)
data_bact <- bind_rows(data_ent, data_eco, data_shell)
data_DO <- data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
data_DO <- Censored_data(data_DO, criteria = "DO_crit_min")
data_DO <- DO_assessment(data_DO)
data_assessed <- bind_rows(data_temp,
data_pH,
data_TP,
data_TSS,
data_eco,
data_DO)
# Assess status by parameter ----------------------------------------------
pH_status <- status_stns(data_pH)
temp_status <- status_stns(data_temp)
TP_status <- status_stns(data_TP)
TSS_status <- status_stns(data_TSS)
bact_status <- status_stns(data_bact)
DO_status <- status_stns(data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(data_pH)
temp_trend <- trend_stns(data_temp)
TP_trend <- trend_stns(data_TP)
TSS_trend <- trend_stns(data_TSS)
bact_trend <- trend_stns(data_bact)
DO_trend <- trend_stns(data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
save(status, trend, stations_AWQMS, file = paste0(project_dir, name, "_seaken_inputs.RData"))
# Assess trends -----------------------------------------------------------
seaKen <- sea_ken(dplyr::filter(data_assessed, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
# Create summary table ------------------------------------------------------
param_sum_stn <- parameter_summary_by_station(status, seaKen, stations_AWQMS)
param_sum_au <- parameter_summary_by_au(status, seaKen, stations_AWQMS)
write.csv(param_sum_stn, paste0(project_dir, name, "_param_summary_by_station.csv"), row.names = FALSE)
write.csv(param_sum_au, paste0(project_dir, name, "_param_summary_by_AU.csv"), row.names = FALSE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"),
title = paste(name, "Status and Trends Map"),
background = "grey", selfcontained = FALSE)
name <- "Tualatin-NWQI"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
# gis_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/GIS'
gis_dir <- '//deqhq1/dwp-public/SpecialProjects/NRCS_NWQI'
# wq_db <- paste0(project_dir, name,"_data_raw_",paste0(query_dates, collapse = "."),".db")
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
# basin_shp <- readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
basin_shp <- readOGR(dsn = gis_dir, layer = 'TualatinJWC_DWSA_dissolve', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# basin_shp <- basin_shp[basin_shp$REPORT %in% c(name), ]
# hucs <- unique(basin_shp$HUC_8)
stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
save(data_raw, file = paste0(project_dir, name, "_data_raw_", start.date, "-", end.date, ".RData"))
# # create_wq_db(wq_db)
# wqdb::write_wqdb(db = wq_db, awqms = data_raw, stations = stations_AWQMS)
#
# # read all the data back
# data_raw <- read_wqdb(db = wq_db, table="vw_discrete", startdate = start.date, enddate=end.date, huc8 = hucs)
# Attach location datum info to observations
# data_raw <- merge(data_raw[,c(-(141:149))],
#                   stations_AWQMS[, c("MLocID", "Datum", "ELEV_Ft")],
#                   by="MLocID", all.x = TRUE, all.y = FALSE)
data_raw[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", 141:149)] <-
stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
au_names <- read.csv('//deqhq1/WQNPS/Status_and_Trend_Reports/Lookups_Statewide/AssessmentUnits_OR_Dissolve.txt')
stations_AWQMS$AU_Name <- au_names[match(stations_AWQMS$AU_ID, au_names$AU_ID),
c("AU_Name")]
# Clean data and add criteria ---------------------------------------------
data <- CleanData(data_raw)
data <- add_criteria(data)
# Assess various parameters -----------------------------------------------
data_pH <- data %>% filter(Char_Name == "pH")
data_pH <- Censored_data(data_pH, criteria = 'pH_Min')
data_pH <- odeqassessment::pH_assessment(data_pH)
data_temp <- data %>% filter(Char_Name == "Temperature, water", Statistical_Base == "7DADM")
data_temp <- Censored_data(data_temp, criteria = "temp_crit")
data_temp <- odeqassessment::temp_assessment(data_temp)
data_TP <- data %>% filter(Char_Name == "Phosphate-phosphorus")
data_TP$TP_crit <- NA
data_TP <- Censored_data(data_TP, criteria = "TP_crit")
data_TP <- TP_assessment(data_TP)
data_TSS <- data %>% filter(Char_Name == "Total suspended solids")
data_TSS$TSS_crit <- NA
data_TSS <- Censored_data(data_TSS, criteria = "TSS_crit")
data_TSS <- TSS_assessment(data_TSS)
data_bact <- data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
data_bact <- data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
data_bact <- Censored_data(data_bact, criteria = "bact_crit_min")
data_ent <- Coastal_Contact_rec(data_bact)
data_eco <- Fresh_Contact_rec(data_bact)
data_shell <- Shell_Harvest(data_bact)
data_bact <- bind_rows(data_ent, data_eco, data_shell)
data_DO <- data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
data_DO <- Censored_data(data_DO, criteria = "DO_crit_min")
data_DO <- DO_assessment(data_DO)
data_assessed <- bind_rows(data_temp,
data_pH,
data_TP,
data_TSS,
data_eco,
data_DO)
# Assess status by parameter ----------------------------------------------
pH_status <- status_stns(data_pH)
temp_status <- status_stns(data_temp)
TP_status <- status_stns(data_TP)
TSS_status <- status_stns(data_TSS)
bact_status <- status_stns(data_bact)
DO_status <- status_stns(data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(data_pH)
temp_trend <- trend_stns(data_temp)
TP_trend <- trend_stns(data_TP)
TSS_trend <- trend_stns(data_TSS)
bact_trend <- trend_stns(data_bact)
DO_trend <- trend_stns(data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
save(status, trend, stations_AWQMS, file = paste0(project_dir, name, "_seaken_inputs.RData"))
# Assess trends -----------------------------------------------------------
seaKen <- sea_ken(dplyr::filter(data_assessed, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
# Create summary table ------------------------------------------------------
param_sum_stn <- parameter_summary_by_station(status, seaKen, stations_AWQMS)
param_sum_au <- parameter_summary_by_au(status, seaKen, stations_AWQMS)
write.csv(param_sum_stn, paste0(project_dir, name, "_param_summary_by_station.csv"), row.names = FALSE)
write.csv(param_sum_au, paste0(project_dir, name, "_param_summary_by_AU.csv"), row.names = FALSE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"),
title = paste(name, "Status and Trends Map"),
background = "grey", selfcontained = FALSE)
setwd("//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends")
devtools::document()
