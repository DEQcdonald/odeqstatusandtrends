wql_streams_data <- filter(wql_streams, Char_Name == i)
if(nrow(wql_streams_data) > 0){
map <- map %>%
addPolylines(data = wql_streams_data,
opacity = 0.7,
weight = 2,
color = "blue",
popup = ~paste0("<b>", STREAM_NAM,
"<br>Parameter:</b> ", i,
"<br><b>Listing:</b> ", LISTING_ST),
group = i
)
} else {print(paste("No water quality limited streams for", i))}
map <- map %>%
addPolylines(data = au_data,
opacity = 1,
weight = 3,
color = ~color,
popup = ~paste0("<b>", AU_Name, "<br>AU:</b> ", AU_ID,
"<br><b>Parameter:</b> ", i, "<br>",
sapply(AU_ID, popupTable, station = NULL, param = i, USE.NAMES = FALSE)
),
group = i
) %>%
addAwesomeMarkers(data = filter(param_summary, Char_Name == i),
lat = ~Lat_DD,
lng = ~Long_DD,
icon = awesomeIcons(icon = ~icon,
iconColor = 'black',
library = 'glyphicon',
markerColor = ~color),
popup = ~paste0("<b>", StationDes, "<br>ID:</b> ", MLocID,
"<br><b>AU:</b> ", AU_ID,
"<br><b>Parameter:</b> ", i, "<br>",
sapply(MLocID, popupTable, AU = NULL, param = i, USE.NAMES = FALSE)),
group = i
) %>%
addPopups(data = filter(param_summary, Char_Name == i),
lat = ~Lat_DD,
lng = ~Long_DD,
popup = ~MLocID,
options = popupOptions(noHide = T,
direction = 'top',
textOnly = T,
closeButton = FALSE,
closeOnClick = FALSE,
# ,
# style = list(
#   "font-style" = "bold",
#   "font-size" = "15px",
#   "offset" = "relative",
#   "bottom" = "10px",
#   "background" = "white",
#   "padding" = "1px",
#   "border-radius" = "5px",
#   "height" = "10px"
# )
),
group = paste0(i, " Labels"))
}
map <- map %>%
# addLabelOnlyMarkers(group = "Labels") %>%
addLayersControl(baseGroups = unique(param_summary$Char_Name),
overlayGroups = c("Assessment Area", "World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
# addLayersControl(overlayGroups = c(paste(unique(param_summary$Char_Name), "Labels"))) %>%
hideGroup(c(unique(param_summary$Char_Name)[-1],paste(unique(param_summary$Char_Name), "Labels"),
"World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
addEasyButton(easyButton(
icon = "fa-globe",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup('Assessment Area');
map.fitBounds(groupLayer.getBounds());
}"))) %>%
addEasyButton(easyButton(
icon = "fa-map-signs",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup(map.layer + ' Labels')
.addTo(map);
}"
)
))
map
map <- leaflet(area) %>% addTiles() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addWMSTiles(baseUrl = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2016_Land_Cover_L48/wms?',
group = "Land Cover (NLCD 2016)",
layers = "NLCD_2016_Land_Cover_L48",
options = WMSTileOptions(version = '1.3.0',
format = 'image/png',
transparent = TRUE)) %>%
addWMSTiles("https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WmsServer",
group = "Hydrography",
options = WMSTileOptions(format = "image/png",
transparent = TRUE),
layers = "0") %>%
addPolygons(fill = FALSE, group = "Assessment Area", label = "Assessment Area")
for(i in unique(param_summary$Char_Name)){
print(paste("Adding layer for", i))
au_data <- filter(assessment_units[, c("AU_ID", "AU_Name")], AU_ID %in% unique(param_summary[param_summary$Char_Name == i,]$AU_ID))
au_data <- merge(au_data, filter(au_colors, Char_Name == i)[,c("AU_ID", "color")], by = "AU_ID")
wql_streams_data <- filter(wql_streams, Char_Name == i)
if(nrow(wql_streams_data) > 0){
map <- map %>%
addPolylines(data = wql_streams_data,
opacity = 0.7,
weight = 2,
color = "blue",
popup = ~paste0("<b>", STREAM_NAM,
"<br>Parameter:</b> ", i,
"<br><b>Listing:</b> ", LISTING_ST),
group = i
)
} else {print(paste("No water quality limited streams for", i))}
map <- map %>%
addPolylines(data = au_data,
opacity = 1,
weight = 3,
color = ~color,
popup = ~paste0("<b>", AU_Name, "<br>AU:</b> ", AU_ID,
"<br><b>Parameter:</b> ", i, "<br>",
sapply(AU_ID, popupTable, station = NULL, param = i, USE.NAMES = FALSE)
),
group = i
) %>%
addAwesomeMarkers(data = filter(param_summary, Char_Name == i),
lat = ~Lat_DD,
lng = ~Long_DD,
icon = awesomeIcons(icon = ~icon,
iconColor = 'black',
library = 'glyphicon',
markerColor = ~color),
popup = ~paste0("<b>", StationDes, "<br>ID:</b> ", MLocID,
"<br><b>AU:</b> ", AU_ID,
"<br><b>Parameter:</b> ", i, "<br>",
sapply(MLocID, popupTable, AU = NULL, param = i, USE.NAMES = FALSE)),
group = i
) %>%
addPopups(data = filter(param_summary, Char_Name == i),
lat = ~Lat_DD,
lng = ~Long_DD,
popup = ~MLocID,
options = popupOptions(noHide = T,
direction = 'top',
textOnly = T,
closeButton = FALSE,
closeOnClick = FALSE,
# ,
# style = list(
#   "font-style" = "bold",
#   "font-size" = "15px",
#   "offset" = "relative",
#   "bottom" = "10px",
#   "background" = "white",
#   "padding" = "1px",
#   "border-radius" = "5px",
#   "height" = "10px"
# )
),
group = paste0(i, " Labels"))
}
map <- map %>%
# addLabelOnlyMarkers(group = "Labels") %>%
addLayersControl(baseGroups = unique(param_summary$Char_Name),
overlayGroups = c("Assessment Area", "World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
# addLayersControl(overlayGroups = c(paste(unique(param_summary$Char_Name), "Labels"))) %>%
hideGroup(c(unique(param_summary$Char_Name)[-1],paste(unique(param_summary$Char_Name), "Labels"),
"World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
addEasyButton(easyButton(
icon = "fa-globe",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup('Assessment Area');
map.fitBounds(groupLayer.getBounds());
}"))) %>%
addEasyButton(easyButton(
icon = "fa-map-signs",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup(map.layer + ' Labels');
map.addLayer(groupLayer);
}"
)
))
map
map <- leaflet(area) %>% addTiles() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addWMSTiles(baseUrl = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2016_Land_Cover_L48/wms?',
group = "Land Cover (NLCD 2016)",
layers = "NLCD_2016_Land_Cover_L48",
options = WMSTileOptions(version = '1.3.0',
format = 'image/png',
transparent = TRUE)) %>%
addWMSTiles("https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WmsServer",
group = "Hydrography",
options = WMSTileOptions(format = "image/png",
transparent = TRUE),
layers = "0") %>%
addPolygons(fill = FALSE, group = "Assessment Area", label = "Assessment Area")
for(i in unique(param_summary$Char_Name)){
print(paste("Adding layer for", i))
au_data <- filter(assessment_units[, c("AU_ID", "AU_Name")], AU_ID %in% unique(param_summary[param_summary$Char_Name == i,]$AU_ID))
au_data <- merge(au_data, filter(au_colors, Char_Name == i)[,c("AU_ID", "color")], by = "AU_ID")
wql_streams_data <- filter(wql_streams, Char_Name == i)
if(nrow(wql_streams_data) > 0){
map <- map %>%
addPolylines(data = wql_streams_data,
opacity = 0.7,
weight = 2,
color = "blue",
popup = ~paste0("<b>", STREAM_NAM,
"<br>Parameter:</b> ", i,
"<br><b>Listing:</b> ", LISTING_ST),
group = i
)
} else {print(paste("No water quality limited streams for", i))}
map <- map %>%
addPolylines(data = au_data,
opacity = 1,
weight = 3,
color = ~color,
popup = ~paste0("<b>", AU_Name, "<br>AU:</b> ", AU_ID,
"<br><b>Parameter:</b> ", i, "<br>",
sapply(AU_ID, popupTable, station = NULL, param = i, USE.NAMES = FALSE)
),
group = i
) %>%
addAwesomeMarkers(data = filter(param_summary, Char_Name == i),
lat = ~Lat_DD,
lng = ~Long_DD,
icon = awesomeIcons(icon = ~icon,
iconColor = 'black',
library = 'glyphicon',
markerColor = ~color),
popup = ~paste0("<b>", StationDes, "<br>ID:</b> ", MLocID,
"<br><b>AU:</b> ", AU_ID,
"<br><b>Parameter:</b> ", i, "<br>",
sapply(MLocID, popupTable, AU = NULL, param = i, USE.NAMES = FALSE)),
group = i
) %>%
addPopups(data = filter(param_summary, Char_Name == i),
lat = ~Lat_DD,
lng = ~Long_DD,
popup = ~MLocID,
options = popupOptions(noHide = T,
direction = 'top',
textOnly = T,
closeButton = FALSE,
closeOnClick = FALSE,
# ,
# style = list(
#   "font-style" = "bold",
#   "font-size" = "15px",
#   "offset" = "relative",
#   "bottom" = "10px",
#   "background" = "white",
#   "padding" = "1px",
#   "border-radius" = "5px",
#   "height" = "10px"
# )
),
group = paste0(i, " Labels"))
}
map <- map %>%
# addLabelOnlyMarkers(group = "Labels") %>%
addLayersControl(baseGroups = unique(param_summary$Char_Name),
overlayGroups = c("Assessment Area", "World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
# addLayersControl(overlayGroups = c(paste(unique(param_summary$Char_Name), "Labels"))) %>%
hideGroup(c(unique(param_summary$Char_Name)[-1],paste(unique(param_summary$Char_Name), "Labels"),
"World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
addEasyButton(easyButton(
icon = "fa-globe",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup('Assessment Area');
map.fitBounds(groupLayer.getBounds());
}"))) %>%
addEasyButton(easyButton(
icon = "fa-map-signs",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup(map.layer + ' Labels')
.addTo(map);
}"
)
))
map
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
library(rgdal)
#library(RODBC)
library(dplyr)
# devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
library(odeqstatusandtrends)
# devtools::install_github('donco/odeqassessment', host = 'https://api.github.com')
library(odeqassessment)
# devtools::install_github('rmichie/wqdblite', host = 'https://api.github.com')
library(wqdblite)
# devtools::install_github("TravisPritchardODEQ/AWQMSdata", host = "https://api.github.com")
library(AWQMSdata)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(tidyr)
library(htmltools)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
clack_data_DO <- DO_assessment(clack_data_DO)
start.date = "2000-01-01"
end.date = "2019-01-01"
query_dates <- c(start.date, end.date)
name <- "Clackamas"
project_dir <- '//deqhq1/wqnps/Agriculture/Status_and_Trend_Analysis/Examples/Assess-Unit-Example'
wq_db <- paste0(project_dir,'/',name,"_data_raw_",paste0(query_dates, collapse = "."),".db")
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb",
layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
basin_shp <- basin_shp[basin_shp$HU_8_NAME %in% c("Clackamas", "South Santiam", "Wilson-Trask-Nestucca", "Coast Fork Willamette"), ]
clack_stations_AWQMS <- get_stations_AWQMS(basin_shp)
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
clack_data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = clack_stations_AWQMS,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
clack_data_DO <- DO_assessment(clack_data_DO)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
DO_status <- status_stns(clack_data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(clack_data_pH)
TP_trend <- trend_stns(clack_data_TP)
TSS_trend <- trend_stns(clack_data_TSS)
bact_trend <- trend_stns(clack_data_eco)
DO_trend <- trend_stns(clack_data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
pH_status <- status_stns(clack_data_pH)
ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
clack_data_raw <- bind_rows(clack_data_raw, ent_data)
clack_data <- CleanData(clack_data_raw)
clack_data <- add_criteria(clack_data)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water", Statistical_Base == "7DADM")
clack_data_temp <- Censored_data(clack_data_temp, criteria = "temp_crit")
clack_data_temp <- temp_assessment(clack_data_temp)
clack_data_TP <- clack_data %>% filter(Char_Name == "Phosphate-phosphorus")
clack_data_TP$TP_crit <- NA
clack_data_TP <- Censored_data(clack_data_TP, criteria = "TP_crit")
clack_data_TP <- TP_assessment(clack_data_TP)
clack_data_TSS <- clack_data %>% filter(Char_Name == "Total suspended solids")
clack_data_TSS$TSS_crit <- NA
clack_data_TSS <- Censored_data(clack_data_TSS, criteria = "TSS_crit")
clack_data_TSS <- TSS_assessment(clack_data_TSS)
clack_data_bact <- clack_data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
clack_data_bact <- clack_data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
clack_data_bact <- Censored_data(clack_data_bact, criteria = "bact_crit_min")
clack_data_ent <- Coastal_Contact_rec(clack_data_bact)
clack_data_eco <- Fresh_Contact_rec(clack_data_bact)
clack_data_DO <- clack_data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
clack_data_DO <- Censored_data(clack_data_DO, criteria = "DO_crit_min")
clack_data_DO <- DO_assessment(clack_data_DO)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
DO_status <- status_stns(clack_data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(clack_data_pH)
temp_trend <- trend_stns(clack_data_temp)
TP_trend <- trend_stns(clack_data_TP)
TSS_trend <- trend_stns(clack_data_TSS)
bact_trend <- trend_stns(clack_data_eco)
DO_trend <- trend_stns(clack_data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
seaKen <- sea_ken(filter(clack_data, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
clack_param_sum <- parameter_summary(status, seaKen, clack_stations_AWQMS)
# Create parameter summary map --------------------------------------------
library(sf)
library(leaflet)
library(knitr)
library(kableExtra)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
pH_status <- status_stns(clack_data_pH)
clack_data_pH <- clack_data %>% filter(Char_Name == "pH")
clack_data_pH <- Censored_data(clack_data_pH, criteria = 'pH_Min')
clack_data_pH <- pH_assessment(clack_data_pH)
??pH_assessment
setwd('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/odeq_assessment package/odeqassessment')
devtools::document()
devtools::install_github('donco/odeqassessment', host = 'https://api.github.com')
clack_data_pH <- odeqassessment::pH_assessment(clack_data_pH)
pH_status <- status_stns(clack_data_pH)
temp_status <- status_stns(clack_data_temp)
TP_status <- status_stns(clack_data_TP)
TSS_status <- status_stns(clack_data_TSS)
bact_status <- status_stns(clack_data_eco)
DO_status <- status_stns(clack_data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(clack_data_pH)
temp_trend <- trend_stns(clack_data_temp)
TP_trend <- trend_stns(clack_data_TP)
TSS_trend <- trend_stns(clack_data_TSS)
bact_trend <- trend_stns(clack_data_eco)
DO_trend <- trend_stns(clack_data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
seaKen <- sea_ken(filter(clack_data, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
clack_param_sum <- parameter_summary(status, seaKen, clack_stations_AWQMS)
# Create parameter summary map --------------------------------------------
library(sf)
library(leaflet)
library(knitr)
library(kableExtra)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
clack_map <- parameter_summary_map(clack_param_sum, basin_shp)
clack_map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
setwd("//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends")
devtools::document()
