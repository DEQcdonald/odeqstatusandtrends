}
cat(paste0("![](", state_map_dir, "Oregon_", gsub(",| ", "_", i), ".png)"), "\n")
cat(figs(name = paste0("state_", i, "_map"), caption = paste0("Summary map of the status of ", i, " across the state")))
# fignum <- fignum + 1
cat("\n\n")
}
cat("## Status\n\n")
cat(paste0("The table below shows the number of attaining, not attaining, and unassessed assessment units by parameter.\n\n"))
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed")) %>%
mutate(Char_Name = simpleCap(Char_Name))
View(au_sum)
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed"))
View(au_sum)
simpleCap(au_sum$Char_Name)
sapply(au_sum$Char_Name, simpleCap)
sapply(au_sum$Char_Name, simpleCap, USE.NAMES = FALSE)
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed")) %>%
mutate(Char_Name = sapply(au_sum$Char_Name, simpleCap, USE.NAMES = FALSE))
View(au_sum)
source('//deqhq1/WQNPS/Status_and_Trend_Reports/R_packages/odeq_StatusAndTrends_Package/odeqstatusandtrends/R/AWQMS_Char_Names.R')
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed")) %>%
mutate(Char_Name = sapply(au_sum$Char_Name, simpleCap, USE.NAMES = FALSE))
View(au_sum)
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed"))
View(au_sum)
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed")) %>%
mutate(Char_Name = sapply(au_sum$Char_Name, simpleCap, USE.NAMES = FALSE))
View(au_sum)
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed")) %>%
mutate(Char_Name = sapply(Char_Name, simpleCap, USE.NAMES = FALSE))
View(au_sum)
devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com', upgrade='never')
table_format <- "markdown"
rmarkdown::render(input = "N:/Status_and_Trend_Reports/Report_Files/state_summary.Rmd",
# params = list(
#   basin = basin,
#   param_sum = param_sum_stn,
#   param_sum_au = param_sum_au,
#   complete_years = complete_years,
#   hucs = hucs,
#   table_format = "html"),
output_format = "word_document",
output_file = paste0("Oregon_SandT_report"),
output_dir = "N:/Status_and_Trend_Reports/2019/Statewide Report",
# output_dir = "C:/workspace/StatusAndTrends",
# output_dir = project_dir,
# intermediates_dir = "C:/workspace/StatusAndTrends",
# intermediates_dir = out_path,
envir = globalenv())
options(knitr.duplicate.label = 'allow')
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning=FALSE,
error = FALSE,
cache = FALSE,
include = TRUE,
fig.keep='all',
fig.path='Figures/')
library(dplyr)
library(knitr)
library(kableExtra)
library(captioner)
library(reshape2)
library(leaflet)
library(mapview)
library(readxl)
library(odeqstatusandtrends)
library(odeqassessment)
library(sf)
library(rgdal)
library(ggplot2)
# param_sum <- params$param_sum
# param_sum_au <- params$param_sum_au
# basin <- params$basin
# complete_years <- params$complete_years
# hucs <- params$hucs
# table_format <- params$table_format
# name <- "Willamette"
year <- "2019"
start.date = "1999-01-01"
end.date = "2018-12-30"
complete_years <- c(as.integer(substr(start.date, start = 1, stop = 4)):as.integer(substr(end.date, start = 1, stop = 4)))
state_project_dir <- paste0("N:/Status_and_Trend_Reports/", year, "/")
figs <- captioner(prefix="\nFigure")
tbls  <- captioner(prefix="Table")
state_param_sum <- readxl::read_xlsx(path = paste0(state_project_dir, "Oregon_parameter_summary.xlsx"),
sheet = "station_summary")
state_param_sum_au <- readxl::read_xlsx(path = paste0(state_project_dir, "Oregon_parameter_summary.xlsx"),
sheet = "AU_summary")
state_param_sum <- state_param_sum %>% dplyr::filter(!is.na(AU_ID))
state_param_sum$Char_Name <- AWQMS_to_standard(state_param_sum$Char_Name)
state_param_sum_au <- state_param_sum_au %>% dplyr::filter(!is.na(AU_ID))
state_param_sum_au$Char_Name <- AWQMS_to_standard(state_param_sum_au$Char_Name)
state_param_sum$AU_Type <- if_else(grepl("_SR_", state_param_sum$AU_ID),
"Stream",
if_else(grepl("_LK_", state_param_sum$AU_ID),
"Lake",
if_else(grepl("_WS_", state_param_sum$AU_ID),
"Watershed Unit",
if_else(grepl("_EB_", state_param_sum$AU_ID),
"Estuary or Bay",
if_else(grepl("_CL_", state_param_sum$AU_ID),
"Coastline",
NA_character_
)
)
)
)
)
state_param_sum_au$AU_Type <- if_else(grepl("_SR_", state_param_sum_au$AU_ID),
"Stream",
if_else(grepl("_LK_", state_param_sum_au$AU_ID),
"Lake",
if_else(grepl("_WS_", state_param_sum_au$AU_ID),
"Watershed Unit",
if_else(grepl("_EB_", state_param_sum_au$AU_ID),
"Estuary or Bay",
if_else(grepl("_CL_", state_param_sum_au$AU_ID),
"Coastline",
NA_character_
)
)
)
)
)
state_param_sum[state_param_sum$AU_ID == "Sru Lake", "AU_Name"] <- "Sru Lake"
state_param_sum[state_param_sum$AU_ID == "Sru Lake", "AU_Type"] <- "Lake"
state_param_sum_au[state_param_sum_au$AU_ID == "Sru Lake", "AU_Name"] <- "Sru Lake"
state_param_sum_au[state_param_sum_au$AU_ID == "Sru Lake", "AU_Type"] <- "Lake"
status_current <- as.symbol(colnames(state_param_sum)[grep("trend", colnames(state_param_sum)) - 1])
basin_intro <- FALSE
# project_dir <- paste0('N:/Status_and_Trend_Reports/2019/2019-', basin, '/')
# area <- readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# area <- area[area$REPORT %in% c(name), ]
# area <- sf::st_as_sf(area)
# area <- st_transform(area, 4326)
state_wql_streams <- sf::st_read(
dsn = "N:/Agriculture/Status_and_Trend_Analysis/R_support_files",
layer = "WQL_Streams_2012",
# query = paste0("SELECT * FROM WQL_Streams_2012 WHERE HUC_4TH_CO IN ('",
#                paste(unique(param_sum$HUC8), collapse = "', '"), "')"),
stringsAsFactors = FALSE, quiet = TRUE
)
state_wql_streams$Char_Name <- unlist(sapply(state_wql_streams$POLLUTANT, AWQMS_Char_Names, USE.NAMES = FALSE))
state_wql_streams <- sf::st_zm(state_wql_streams, what = "ZM")
state_wql_streams <- st_transform(state_wql_streams, 4326)
state_wql_streams <- filter(state_wql_streams[, c("STREAM_NAM", "SEGMENT_ID", "SEASON", "Char_Name", "LISTING_ST", "TMDL_INFO")], Char_Name %in% unique(state_param_sum$Char_Name))
state_wql_streams_shp <- state_wql_streams %>% group_by(Char_Name) %>% summarise(geometry = st_union(geometry))
# wql_streams <- wql_streams[lapply(wql_streams$`_ogr_geometry_`, length) != 0,]
if(!dir.exists(paste0(state_project_dir, "Statewide Maps"))) {dir.create(paste0(state_project_dir, "Statewide Maps"))}
state_map_dir <- paste0(state_project_dir, "Statewide Maps/")
lgnd <- base64enc::base64encode("//deqhq1/WQNPS/Status_and_Trend_Reports/Figures/map_overview_legend.png")
HUC_shp <- readOGR(dsn = "N:/Status_and_Trend_Reports/GIS", layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
basin_names <- sort(unique(HUC_shp$REPORT))
stations_AWQMS <- get_stations_AWQMS(HUC_shp)
huc_names <- unique(stations_AWQMS[,c("HUC8", "HUC8_Name")])
HUC_shp <- sf::st_as_sf(HUC_shp)
HUC_shp <- st_transform(HUC_shp, 4326)
if(!file.exists(paste0(state_project_dir, "Oregon_query_stations.png"))){
query_map <- leaflet(stations_AWQMS, options = leafletOptions(zoomControl = FALSE)) %>% addProviderTiles("Esri.NatGeoWorldMap") %>%
addPolygons(data = HUC_shp, fill = FALSE, opacity = 1, weight = 1.5, color = "black") %>%
addCircleMarkers(lng = ~Long_DD, lat = ~Lat_DD, stroke = TRUE, weight = 1, opacity = 1, fillOpacity = 1, radius = 1.5,
color = "black", fillColor = "green")
mapview::mapshot(query_map, file = paste0(state_map_dir, "Oregon_query_stations.png"), remove_controls = c("zoomControl", "layersControl"))
}
types <- unique(state_param_sum_au$AU_Type)
n_types <- length(unique(state_param_sum_au$AU_Type))
parameters <- odeqstatusandtrends::AWQMS_to_standard(unique(state_param_sum_au$Char_Name))
n_params <- length(unique(state_param_sum_au$Char_Name))
list_fun <- function(x){paste(x, collapse = "s', '")}
cat(paste0("The state of Oregon is listed for ", length(unique(state_wql_streams$Char_Name)), " parameters among its water bodies. Available data was sufficient to assess status and/or trend at ", length(unique(state_param_sum$MLocID)), " stations within the state. These stations were located across ", length(unique(state_param_sum_au$AU_ID)), " assessment units consisting of '", list_fun(types[1:(n_types - 1)]), "s' and '", list_fun(types[n_types]), "s'. Data for ",
gsub("'", "",
paste0(paste(parameters[1:(n_params - 1)], collapse = "', '"), "' and '", paste(parameters[n_params], collapse = "', '")
, "'")
), " were available for analysis and included in this report. The following section summarizes the results of the analysis state wide.\n\n"))
# cat(paste("The maps below show the stations included in the analysis for each parameter. Stations are color coded by current status. The Water Quality Listed streams for each parameter are included in the maps as red lines."), "\n\n")
#
# cat(paste0("![](", project_dir, "GIS/", "state_param_summary_map.png)"), "\n\n")
cat("## Parameter Summary Maps\n\n")
# fignum <- 1
for(i in unique(state_param_sum$Char_Name)){
if(i != "pH"){
parameter_name <- simpleCap(i)
} else {parameter_name <- "pH"}
# cat(paste(i, "map"))
# cat("\n\n")
if(!file.exists(paste0(state_map_dir, "Oregon_", gsub(",| ", "_", i), ".png"))){
wql_streams_i <- filter(state_wql_streams_shp, Char_Name == i)
# wql_streams_i <- wql_streams_i[lapply(wql_streams_i$`_ogr_geometry_`, length) != 0,]
map_df <- state_param_sum %>% filter(Char_Name == i) %>% mutate(color = if_else(!!status_current %in% c("Unassessed", "Insufficient Data"),
"lightgray",
if_else(!!status_current == "Not Attaining",
"orange",
"green")
))
map <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
addProviderTiles("Esri.NatGeoWorldMap") %>%
addPolylines(data = wql_streams_i,
opacity = 1,
weight = 2,
color = "red"
# ,
# popup = ~paste0("<b>", STREAM_NAM,
#                 "<br>Parameter:</b> ", Char_Name,
#                 "<br><b>Listing:</b> ", LISTING_ST),
# popup = ~paste0("<b>", STREAM_NAM,
#                 # "<br>Parameter:</b> ", Char_Name,
#                 "<br></b><br>",
#                 sapply(SEGMENT_ID, WQLpopupTable, param = i, USE.NAMES = FALSE)),
# popupOptions = popupOptions(maxWidth = 1200),
# highlightOptions = highlightOptions(color = "red", weight = 8, opacity = 1),
# label = ~STREAM_NAM,
# smoothFactor = 2
# ,
# group = "WQ Listed Streams"
) %>%
addPolygons(data = HUC_shp, fill = FALSE, opacity = 1, weight = 1.5, color = "black") %>%
addCircleMarkers(data = map_df, lng = ~Long_DD, lat = ~Lat_DD,
fillColor = ~color, stroke = TRUE, weight = 0.5,
opacity = 1, fillOpacity = 1, color = 'black', radius = 2.5) %>%
addControl(position = "bottomright", className = "legend",
html = sprintf('<html><body><div style="opacity:0.95">
<img width="150" height="140" src="data:image/png;base64,%s">
</div></body></html>', lgnd)) %>%
addControl(html = paste('<div style="opacity:0.95; background:white; padding:0px 6px; border-radius: 8px; font-size:18px"><b>',
"Oregon", parameter_name, "Status</b></div>"),
position = "topleft", className = "map_title")
# %>%
#   leafem::addLogo(img = "N:/Status_and_Trend_Reports/Figures/map_overview_legend.png", src = "local", alpha = 1, position = "bottomleft",
#                   offset.x = 10, offset.y = 10, width = 150, height = 150)
# maps[[i]] <- map
mapview::mapshot(map, file = paste0(state_map_dir, "Oregon_", gsub(",| ", "_", i), ".png")
# , remove_controls = c("zoomControl", "layersControl")
)
}
cat(paste0("![](", state_map_dir, "Oregon_", gsub(",| ", "_", i), ".png)"), "\n")
cat(figs(name = paste0("state_", i, "_map"), caption = paste0("Summary map of the status of ", i, " across the state")))
# fignum <- fignum + 1
cat("\n\n")
}
cat("## Status\n\n")
cat(paste0("The table below shows the number of attaining, not attaining, and unassessed assessment units by parameter.\n\n"))
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed")) %>%
mutate(Char_Name = sapply(Char_Name, simpleCap, USE.NAMES = FALSE))
View(au_sum)
simpleCap("pH")
devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com', upgrade='never')
options(knitr.duplicate.label = 'allow')
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning=FALSE,
error = FALSE,
cache = FALSE,
include = TRUE,
fig.keep='all',
fig.path='Figures/')
library(dplyr)
library(knitr)
library(kableExtra)
library(captioner)
library(reshape2)
library(leaflet)
library(mapview)
library(readxl)
library(odeqstatusandtrends)
library(odeqassessment)
library(sf)
library(rgdal)
library(ggplot2)
# param_sum <- params$param_sum
# param_sum_au <- params$param_sum_au
# basin <- params$basin
# complete_years <- params$complete_years
# hucs <- params$hucs
# table_format <- params$table_format
# name <- "Willamette"
year <- "2019"
start.date = "1999-01-01"
end.date = "2018-12-30"
complete_years <- c(as.integer(substr(start.date, start = 1, stop = 4)):as.integer(substr(end.date, start = 1, stop = 4)))
state_project_dir <- paste0("N:/Status_and_Trend_Reports/", year, "/")
figs <- captioner(prefix="\nFigure")
tbls  <- captioner(prefix="Table")
state_param_sum <- readxl::read_xlsx(path = paste0(state_project_dir, "Oregon_parameter_summary.xlsx"),
sheet = "station_summary")
state_param_sum_au <- readxl::read_xlsx(path = paste0(state_project_dir, "Oregon_parameter_summary.xlsx"),
sheet = "AU_summary")
state_param_sum <- state_param_sum %>% dplyr::filter(!is.na(AU_ID))
state_param_sum$Char_Name <- AWQMS_to_standard(state_param_sum$Char_Name)
state_param_sum_au <- state_param_sum_au %>% dplyr::filter(!is.na(AU_ID))
state_param_sum_au$Char_Name <- AWQMS_to_standard(state_param_sum_au$Char_Name)
state_param_sum$AU_Type <- if_else(grepl("_SR_", state_param_sum$AU_ID),
"Stream",
if_else(grepl("_LK_", state_param_sum$AU_ID),
"Lake",
if_else(grepl("_WS_", state_param_sum$AU_ID),
"Watershed Unit",
if_else(grepl("_EB_", state_param_sum$AU_ID),
"Estuary or Bay",
if_else(grepl("_CL_", state_param_sum$AU_ID),
"Coastline",
NA_character_
)
)
)
)
)
state_param_sum_au$AU_Type <- if_else(grepl("_SR_", state_param_sum_au$AU_ID),
"Stream",
if_else(grepl("_LK_", state_param_sum_au$AU_ID),
"Lake",
if_else(grepl("_WS_", state_param_sum_au$AU_ID),
"Watershed Unit",
if_else(grepl("_EB_", state_param_sum_au$AU_ID),
"Estuary or Bay",
if_else(grepl("_CL_", state_param_sum_au$AU_ID),
"Coastline",
NA_character_
)
)
)
)
)
state_param_sum[state_param_sum$AU_ID == "Sru Lake", "AU_Name"] <- "Sru Lake"
state_param_sum[state_param_sum$AU_ID == "Sru Lake", "AU_Type"] <- "Lake"
state_param_sum_au[state_param_sum_au$AU_ID == "Sru Lake", "AU_Name"] <- "Sru Lake"
state_param_sum_au[state_param_sum_au$AU_ID == "Sru Lake", "AU_Type"] <- "Lake"
status_current <- as.symbol(colnames(state_param_sum)[grep("trend", colnames(state_param_sum)) - 1])
basin_intro <- FALSE
# project_dir <- paste0('N:/Status_and_Trend_Reports/2019/2019-', basin, '/')
# area <- readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# area <- area[area$REPORT %in% c(name), ]
# area <- sf::st_as_sf(area)
# area <- st_transform(area, 4326)
state_wql_streams <- sf::st_read(
dsn = "N:/Agriculture/Status_and_Trend_Analysis/R_support_files",
layer = "WQL_Streams_2012",
# query = paste0("SELECT * FROM WQL_Streams_2012 WHERE HUC_4TH_CO IN ('",
#                paste(unique(param_sum$HUC8), collapse = "', '"), "')"),
stringsAsFactors = FALSE, quiet = TRUE
)
state_wql_streams$Char_Name <- unlist(sapply(state_wql_streams$POLLUTANT, AWQMS_Char_Names, USE.NAMES = FALSE))
state_wql_streams <- sf::st_zm(state_wql_streams, what = "ZM")
state_wql_streams <- st_transform(state_wql_streams, 4326)
state_wql_streams <- filter(state_wql_streams[, c("STREAM_NAM", "SEGMENT_ID", "SEASON", "Char_Name", "LISTING_ST", "TMDL_INFO")], Char_Name %in% unique(state_param_sum$Char_Name))
state_wql_streams_shp <- state_wql_streams %>% group_by(Char_Name) %>% summarise(geometry = st_union(geometry))
# wql_streams <- wql_streams[lapply(wql_streams$`_ogr_geometry_`, length) != 0,]
if(!dir.exists(paste0(state_project_dir, "Statewide Maps"))) {dir.create(paste0(state_project_dir, "Statewide Maps"))}
state_map_dir <- paste0(state_project_dir, "Statewide Maps/")
lgnd <- base64enc::base64encode("//deqhq1/WQNPS/Status_and_Trend_Reports/Figures/map_overview_legend.png")
types <- unique(state_param_sum_au$AU_Type)
n_types <- length(unique(state_param_sum_au$AU_Type))
parameters <- odeqstatusandtrends::AWQMS_to_standard(unique(state_param_sum_au$Char_Name))
n_params <- length(unique(state_param_sum_au$Char_Name))
list_fun <- function(x){paste(x, collapse = "s', '")}
cat(paste0("The state of Oregon is listed for ", length(unique(state_wql_streams$Char_Name)), " parameters among its water bodies. Available data was sufficient to assess status and/or trend at ", length(unique(state_param_sum$MLocID)), " stations within the state. These stations were located across ", length(unique(state_param_sum_au$AU_ID)), " assessment units consisting of '", list_fun(types[1:(n_types - 1)]), "s' and '", list_fun(types[n_types]), "s'. Data for ",
gsub("'", "",
paste0(paste(parameters[1:(n_params - 1)], collapse = "', '"), "' and '", paste(parameters[n_params], collapse = "', '")
, "'")
), " were available for analysis and included in this report. The following section summarizes the results of the analysis state wide.\n\n"))
# cat(paste("The maps below show the stations included in the analysis for each parameter. Stations are color coded by current status. The Water Quality Listed streams for each parameter are included in the maps as red lines."), "\n\n")
#
# cat(paste0("![](", project_dir, "GIS/", "state_param_summary_map.png)"), "\n\n")
cat("## Parameter Summary Maps\n\n")
# fignum <- 1
for(i in unique(state_param_sum$Char_Name)){
if(i != "pH"){
parameter_name <- simpleCap(i)
} else {parameter_name <- "pH"}
# cat(paste(i, "map"))
# cat("\n\n")
if(!file.exists(paste0(state_map_dir, "Oregon_", gsub(",| ", "_", i), ".png"))){
wql_streams_i <- filter(state_wql_streams_shp, Char_Name == i)
# wql_streams_i <- wql_streams_i[lapply(wql_streams_i$`_ogr_geometry_`, length) != 0,]
map_df <- state_param_sum %>% filter(Char_Name == i) %>% mutate(color = if_else(!!status_current %in% c("Unassessed", "Insufficient Data"),
"lightgray",
if_else(!!status_current == "Not Attaining",
"orange",
"green")
))
map <- leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
addProviderTiles("Esri.NatGeoWorldMap") %>%
addPolylines(data = wql_streams_i,
opacity = 1,
weight = 2,
color = "red"
# ,
# popup = ~paste0("<b>", STREAM_NAM,
#                 "<br>Parameter:</b> ", Char_Name,
#                 "<br><b>Listing:</b> ", LISTING_ST),
# popup = ~paste0("<b>", STREAM_NAM,
#                 # "<br>Parameter:</b> ", Char_Name,
#                 "<br></b><br>",
#                 sapply(SEGMENT_ID, WQLpopupTable, param = i, USE.NAMES = FALSE)),
# popupOptions = popupOptions(maxWidth = 1200),
# highlightOptions = highlightOptions(color = "red", weight = 8, opacity = 1),
# label = ~STREAM_NAM,
# smoothFactor = 2
# ,
# group = "WQ Listed Streams"
) %>%
addPolygons(data = HUC_shp, fill = FALSE, opacity = 1, weight = 1.5, color = "black") %>%
addCircleMarkers(data = map_df, lng = ~Long_DD, lat = ~Lat_DD,
fillColor = ~color, stroke = TRUE, weight = 0.5,
opacity = 1, fillOpacity = 1, color = 'black', radius = 2.5) %>%
addControl(position = "bottomright", className = "legend",
html = sprintf('<html><body><div style="opacity:0.95">
<img width="150" height="140" src="data:image/png;base64,%s">
</div></body></html>', lgnd)) %>%
addControl(html = paste('<div style="opacity:0.95; background:white; padding:0px 6px; border-radius: 8px; font-size:18px"><b>',
"Oregon", parameter_name, "Status</b></div>"),
position = "topleft", className = "map_title")
# %>%
#   leafem::addLogo(img = "N:/Status_and_Trend_Reports/Figures/map_overview_legend.png", src = "local", alpha = 1, position = "bottomleft",
#                   offset.x = 10, offset.y = 10, width = 150, height = 150)
# maps[[i]] <- map
mapview::mapshot(map, file = paste0(state_map_dir, "Oregon_", gsub(",| ", "_", i), ".png")
# , remove_controls = c("zoomControl", "layersControl")
)
}
cat(paste0("![](", state_map_dir, "Oregon_", gsub(",| ", "_", i), ".png)"), "\n")
cat(figs(name = paste0("state_", i, "_map"), caption = paste0("Summary map of the status of ", i, " across the state")))
# fignum <- fignum + 1
cat("\n\n")
}
cat("## Status\n\n")
cat(paste0("The table below shows the number of attaining, not attaining, and unassessed assessment units by parameter.\n\n"))
au_sum <- state_param_sum_au %>% group_by(Char_Name) %>%
summarise(Attaining = sum(status_2015_2018 == "Attaining"),
'Not Attaining' = sum(status_2015_2018 == "Not Attaining"),
Unassessed = sum(status_2015_2018 == "Unassessed")) %>%
mutate(Char_Name = sapply(Char_Name, simpleCap, USE.NAMES = FALSE))
View(au_sum)
table_format <- "markdown"
rmarkdown::render(input = "N:/Status_and_Trend_Reports/Report_Files/state_summary.Rmd",
# params = list(
#   basin = basin,
#   param_sum = param_sum_stn,
#   param_sum_au = param_sum_au,
#   complete_years = complete_years,
#   hucs = hucs,
#   table_format = "html"),
output_format = "word_document",
output_file = paste0("Oregon_SandT_report"),
output_dir = "N:/Status_and_Trend_Reports/2019/Statewide Report",
# output_dir = "C:/workspace/StatusAndTrends",
# output_dir = project_dir,
# intermediates_dir = "C:/workspace/StatusAndTrends",
# intermediates_dir = out_path,
envir = globalenv())
table_format <- "markdown"
rmarkdown::render(input = "N:/Status_and_Trend_Reports/Report_Files/state_summary.Rmd",
# params = list(
#   basin = basin,
#   param_sum = param_sum_stn,
#   param_sum_au = param_sum_au,
#   complete_years = complete_years,
#   hucs = hucs,
#   table_format = "html"),
output_format = "word_document",
output_file = paste0("Oregon_SandT_report"),
output_dir = "N:/Status_and_Trend_Reports/2019/Statewide Report",
# output_dir = "C:/workspace/StatusAndTrends",
# output_dir = project_dir,
# intermediates_dir = "C:/workspace/StatusAndTrends",
# intermediates_dir = out_path,
envir = globalenv())
state_param_sum %>% rename(Char_Name = Pollutant)
state_param_sum %>% rename(Pollutant = Char_Name)
table_format <- "markdown"
rmarkdown::render(input = "N:/Status_and_Trend_Reports/Report_Files/state_summary.Rmd",
# params = list(
#   basin = basin,
#   param_sum = param_sum_stn,
#   param_sum_au = param_sum_au,
#   complete_years = complete_years,
#   hucs = hucs,
#   table_format = "html"),
output_format = "word_document",
output_file = paste0("Oregon_SandT_report"),
output_dir = "N:/Status_and_Trend_Reports/2019/Statewide Report",
# output_dir = "C:/workspace/StatusAndTrends",
# output_dir = project_dir,
# intermediates_dir = "C:/workspace/StatusAndTrends",
# intermediates_dir = out_path,
envir = globalenv())
