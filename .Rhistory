temp_plots[[i]] <- p
}
plot_temperature <- function(data, seaKen, station){
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
clack_data <- CleanData(data_AWQMS)
add_criteria <- function(data) {
parameters <- unique(data$Char_Name)
print("Checking spawn dates...")
data$spawn_start <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))
data$spawn_end <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))
data$sample_mon_year <- as.numeric(lubridate::month(data$sample_datetime))*100 + as.numeric(lubridate::day(data$sample_datetime))
data$spawning <- ifelse(is.na(data$spawn_start), "Non-Spawning",
ifelse(data$spawn_start < data$spawn_end & (data$sample_mon_year > data$spawn_start & data$sample_mon_year < data$spawn_end), "Spawning",
ifelse(data$spawn_start > data$spawn_end & (data$sample_mon_year > data$spawn_start | data$sample_mon_year < data$spawn_end), "Spawning", "Non-Spawning")
)
)
if(any("Temperature, water" %in% parameters)) {
print("Adding temperature criteria values...")
temp_data <- data %>% filter(Char_Name == "Temperature, water")
sdadm <- temp_data %>% filter(Statistical_Base == "7DADM")
data <- bind_rows(data[data$Char_Name != "Temperature, water",], sdadm)
data$temp_crit <- ifelse(data$spawning, 13, Temp_crit[match(data$FishCode, Temp_crit$FishUse_code), "Temp_Criteria"])
}
if(any("Dissolved oxygen (DO)" %in% parameters)) {
print("Adding dissolved oxygen criteria values...")
data$Do_crit_30D <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_30D"]
data$Do_crit_7Mi <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_7Mi"]
data$DO_crit_min <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Min"]
data$Do_crit_instant <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Instant"]
}
if(any("pH" %in% parameters)) {
print("Adding pH criteria values...")
data$pH_crit_min <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Min"]
data$pH_crit_max <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Max"]
}
if(any(parameters %in% c("Escherichia coli", "Fecal Coliform", "Enterococcus"))) {
print("adding bacteria criteria values...")
data$bact_crit_ss <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "SS_Crit"]
data$bact_crit_geomean <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Geomean_Crit"]
data$bact_crit_percent <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Perc_Crit"]
}
return(data)
}
clack_data <- add_criteria(clack_data)
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_ph <- clack_data %>% filter(Char_Name == "pH")
clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data <- bind_rows(clack_data_temp, clack_data_ph)
status <- status_stns(clack_data)
trend <- trend_stns(clack_data)
seaKen <- sea_ken(filter(clack_data, MLocID %in% trend$MLocID))
clack_data <- CleanData(data_AWQMS)
clack_data <- add_criteria(clack_data)
unique(clack_data$spawning)
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_ph <- clack_data %>% filter(Char_Name == "pH")
clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data <- bind_rows(clack_data_temp, clack_data_ph)
status <- status_stns(clack_data)
trend <- trend_stns(clack_data)
seaKen <- sea_ken(filter(clack_data, MLocID %in% trend$MLocID))
View(seaKen)
add_criteria <- function(data) {
parameters <- unique(data$Char_Name)
print("Checking spawn dates...")
data$spawn_start <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))
data$spawn_end <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))
data$sample_mon_year <- as.numeric(lubridate::month(data$sample_datetime))*100 + as.numeric(lubridate::day(data$sample_datetime))
data$spawning <- ifelse(is.na(data$spawn_start), "Non-Spawning",
ifelse(data$spawn_start < data$spawn_end & (data$sample_mon_year > data$spawn_start & data$sample_mon_year < data$spawn_end), "Spawning",
ifelse(data$spawn_start > data$spawn_end & (data$sample_mon_year > data$spawn_start | data$sample_mon_year < data$spawn_end), "Spawning", "Non-Spawning")
)
)
if(any("Temperature, water" %in% parameters)) {
print("Adding temperature criteria values...")
temp_data <- data %>% filter(Char_Name == "Temperature, water")
sdadm <- temp_data %>% filter(Statistical_Base == "7DADM")
data <- bind_rows(data[data$Char_Name != "Temperature, water",], sdadm)
data$temp_crit <- ifelse(data$spawning == "Spawning", 13, Temp_crit[match(data$FishCode, Temp_crit$FishUse_code), "Temp_Criteria"])
}
if(any("Dissolved oxygen (DO)" %in% parameters)) {
print("Adding dissolved oxygen criteria values...")
data$Do_crit_30D <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_30D"]
data$Do_crit_7Mi <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_7Mi"]
data$DO_crit_min <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Min"]
data$Do_crit_instant <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Instant"]
}
if(any("pH" %in% parameters)) {
print("Adding pH criteria values...")
data$pH_crit_min <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Min"]
data$pH_crit_max <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Max"]
}
if(any(parameters %in% c("Escherichia coli", "Fecal Coliform", "Enterococcus"))) {
print("adding bacteria criteria values...")
data$bact_crit_ss <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "SS_Crit"]
data$bact_crit_geomean <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Geomean_Crit"]
data$bact_crit_percent <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Perc_Crit"]
}
return(data)
}
clack_data <- CleanData(data_AWQMS)
clack_data <- add_criteria(clack_data)
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_ph <- clack_data %>% filter(Char_Name == "pH")
clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data <- bind_rows(clack_data_temp, clack_data_ph)
status <- status_stns(clack_data)
trend <- trend_stns(clack_data)
seaKen <- sea_ken(filter(clack_data, MLocID %in% trend$MLocID))
temp_stations <- unique(c(status[status$Char_Name == "Temperature, water",]$MLocID, seaKen[seaKen$Char_Name == "Temperature, water",]$MLocID))
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
temp_plots[1]
plot_temperature <- function(data, seaKen, station){
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
temp_plots[1]
plot_temperature <- function(data, seaKen, station){
}
plot_temperature <- function(data, seaKen, station){
if(station %in% seaKen$MLocID){
slope <- seaKen[seaKen$MLocID == station, "slope"]
x_min <- min(data$sample_datetime, na.rm = TRUE)
x_max <- max(data$sample_datetime, na.rm = TRUE)
x_delta <- as.numeric((x_max-x_min)/2)
y_median <- median(data$Result_Numeric, na.rm = TRUE)
sk_min <- y_median - x_delta*slope/365.25
sk_max <- y_median + x_delta*slope/365.25
}
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color="Criteria", linetype=spawning, shape=spawning))
}
p <- p +
scale_color_manual(values = c('TRUE' = 'red', 'FALSE' = 'black', "Trend" = 'blue', "Criteria" = "black")) +
scale_linetype_manual(values = c('TRUE' = 0, 'FALSE' = 0, "Trend" = 1, "Spawning" = 2, "Non-Spawning" = 3)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 16, "Trend" = 32, "Spawning" = 32, "Non-Spawning" = 32)
return(p)
}
plot_temperature <- function(data, seaKen, station){
if(station %in% seaKen$MLocID){
slope <- seaKen[seaKen$MLocID == station, "slope"]
x_min <- min(data$sample_datetime, na.rm = TRUE)
x_max <- max(data$sample_datetime, na.rm = TRUE)
x_delta <- as.numeric((x_max-x_min)/2)
y_median <- median(data$Result_Numeric, na.rm = TRUE)
sk_min <- y_median - x_delta*slope/365.25
sk_max <- y_median + x_delta*slope/365.25
}
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color="Criteria", linetype=spawning, shape=spawning))
}
p <- p +
scale_color_manual(values = c('TRUE' = 'red', 'FALSE' = 'black', "Trend" = 'blue', "Criteria" = "black")) +
scale_linetype_manual(values = c('TRUE' = 0, 'FALSE' = 0, "Trend" = 1, "Spawning" = 2, "Non-Spawning" = 3)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 16, "Trend" = 32, "Spawning" = 32, "Non-Spawning" = 32))
return(p)
}
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
temp_plots[1]
plot_temperature <- function(data, seaKen, station){
if(station %in% seaKen$MLocID){
slope <- seaKen[seaKen$MLocID == station, "slope"]
x_min <- min(data$sample_datetime, na.rm = TRUE)
x_max <- max(data$sample_datetime, na.rm = TRUE)
x_delta <- as.numeric((x_max-x_min)/2)
y_median <- median(data$Result_Numeric, na.rm = TRUE)
sk_min <- y_median - x_delta*slope/365.25
sk_max <- y_median + x_delta*slope/365.25
}
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color="Criteria", linetype=spawning, shape=spawning))
}
p <- p +
scale_color_manual(values = c('TRUE' = 'red', 'FALSE' = 'black', "Trend" = 'blue', "Spawning" = 'black', "Non-Spawning" = 'black')) +
scale_linetype_manual(values = c('TRUE' = 0, 'FALSE' = 0, "Trend" = 1, "Spawning" = 2, "Non-Spawning" = 3)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 16, "Trend" = 32, "Spawning" = 32, "Non-Spawning" = 32))
return(p)
}
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
temp_plots[1]
plot_temperature <- function(data, seaKen, station){
if(station %in% seaKen$MLocID){
slope <- seaKen[seaKen$MLocID == station, "slope"]
x_min <- min(data$sample_datetime, na.rm = TRUE)
x_max <- max(data$sample_datetime, na.rm = TRUE)
x_delta <- as.numeric((x_max-x_min)/2)
y_median <- median(data$Result_Numeric, na.rm = TRUE)
sk_min <- y_median - x_delta*slope/365.25
sk_max <- y_median + x_delta*slope/365.25
}
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color=spawning, linetype=spawning, shape=spawning))
}
p <- p +
scale_color_manual(values = c('TRUE' = 'red', 'FALSE' = 'black', "Trend" = 'blue', "Spawning" = 'black', "Non-Spawning" = 'black')) +
scale_linetype_manual(values = c('TRUE' = 0, 'FALSE' = 0, "Trend" = 1, "Spawning" = 2, "Non-Spawning" = 3)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 16, "Trend" = 32, "Spawning" = 32, "Non-Spawning" = 32))
return(p)
}
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
temp_plots[1]
temp_plots[2]
temp_plots[3]
data <- plot_data
years <- unique(lubridate::year(data$sample_datetime))
spawn_start <- unique(data$spawn_start)
spawn_end <- unique(data$spawn_end)
years <- unique(lubridate::year(data$sample_datetime))
ymin <- min(data$Result_Numeric, na.rm = TRUE)
ymax <- max(data$Result_Numeric, na.rm = TRUE)
ymin <- min(c(data$Result_Numeric, data$temp_crit), na.rm = TRUE)
ymax <- max(c(data$Result_Numeric, data$temp_crit), na.rm = TRUE)
rects <- geom_rect(aes(xmin=spawn_start, xmax=spawn_end, ymin=ymin*0.5, ymax=ymax*1.5))
spawn_start <- as.POSIXct(unique(data$spawn_start), format="%m%d")
add_criteria <- function(data) {
parameters <- unique(data$Char_Name)
print("Checking spawn dates...")
data$spawn_start <- as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")
data$spawn_end <- as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")
data$spawn_start_numeric <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))
data$spawn_end_numeric <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))
data$sample_mon_year <- as.numeric(lubridate::month(data$sample_datetime))*100 + as.numeric(lubridate::day(data$sample_datetime))
data$spawning <- ifelse(is.na(data$spawn_start_numeric), "Non-Spawning",
ifelse(data$spawn_start_numeric < data$spawn_end_numeric & (data$sample_mon_year > data$spawn_start_numeric & data$sample_mon_year < data$spawn_end_numeric), "Spawning",
ifelse(data$spawn_start_numeric > data$spawn_end_numeric & (data$sample_mon_year > data$spawn_start_numeric | data$sample_mon_year < data$spawn_end_numeric), "Spawning", "Non-Spawning")
)
)
if(any("Temperature, water" %in% parameters)) {
print("Adding temperature criteria values...")
temp_data <- data %>% filter(Char_Name == "Temperature, water")
sdadm <- temp_data %>% filter(Statistical_Base == "7DADM")
data <- bind_rows(data[data$Char_Name != "Temperature, water",], sdadm)
data$temp_crit <- ifelse(data$spawning == "Spawning", 13, Temp_crit[match(data$FishCode, Temp_crit$FishUse_code), "Temp_Criteria"])
}
if(any("Dissolved oxygen (DO)" %in% parameters)) {
print("Adding dissolved oxygen criteria values...")
data$Do_crit_30D <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_30D"]
data$Do_crit_7Mi <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_7Mi"]
data$DO_crit_min <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Min"]
data$Do_crit_instant <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Instant"]
}
if(any("pH" %in% parameters)) {
print("Adding pH criteria values...")
data$pH_crit_min <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Min"]
data$pH_crit_max <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Max"]
}
if(any(parameters %in% c("Escherichia coli", "Fecal Coliform", "Enterococcus"))) {
print("adding bacteria criteria values...")
data$bact_crit_ss <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "SS_Crit"]
data$bact_crit_geomean <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Geomean_Crit"]
data$bact_crit_percent <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Perc_Crit"]
}
return(data)
}
clack_data <- CleanData(data_AWQMS)
clack_data <- add_criteria(clack_data)
add_criteria <- function(data) {
parameters <- unique(data$Char_Name)
print("Checking spawn dates...")
data$spawn_start <- as.POSIXct(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")
data$spawn_end <- as.POSIXct(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")
data$spawn_start_numeric <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnStart"], format="%m/%d")))
data$spawn_end_numeric <- as.numeric(lubridate::month(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))*100 +
as.numeric(lubridate::day(as.Date(LU_spawn[match(data$SpawnCode, LU_spawn$SpawnCode),"SpawnEnd"], format="%m/%d")))
data$sample_mon_year <- as.numeric(lubridate::month(data$sample_datetime))*100 + as.numeric(lubridate::day(data$sample_datetime))
data$spawning <- ifelse(is.na(data$spawn_start_numeric), "Non-Spawning",
ifelse(data$spawn_start_numeric < data$spawn_end_numeric & (data$sample_mon_year > data$spawn_start_numeric & data$sample_mon_year < data$spawn_end_numeric), "Spawning",
ifelse(data$spawn_start_numeric > data$spawn_end_numeric & (data$sample_mon_year > data$spawn_start_numeric | data$sample_mon_year < data$spawn_end_numeric), "Spawning", "Non-Spawning")
)
)
if(any("Temperature, water" %in% parameters)) {
print("Adding temperature criteria values...")
temp_data <- data %>% filter(Char_Name == "Temperature, water")
sdadm <- temp_data %>% filter(Statistical_Base == "7DADM")
data <- bind_rows(data[data$Char_Name != "Temperature, water",], sdadm)
data$temp_crit <- ifelse(data$spawning == "Spawning", 13, Temp_crit[match(data$FishCode, Temp_crit$FishUse_code), "Temp_Criteria"])
}
if(any("Dissolved oxygen (DO)" %in% parameters)) {
print("Adding dissolved oxygen criteria values...")
data$Do_crit_30D <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_30D"]
data$Do_crit_7Mi <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_7Mi"]
data$DO_crit_min <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Min"]
data$Do_crit_instant <- DO_crit[match(data$DO_code, DO_crit$DO_code), "crit_Instant"]
}
if(any("pH" %in% parameters)) {
print("Adding pH criteria values...")
data$pH_crit_min <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Min"]
data$pH_crit_max <- pH_crit[match(data$pH_code, pH_crit$pH_code), "pH_Max"]
}
if(any(parameters %in% c("Escherichia coli", "Fecal Coliform", "Enterococcus"))) {
print("adding bacteria criteria values...")
data$bact_crit_ss <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "SS_Crit"]
data$bact_crit_geomean <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Geomean_Crit"]
data$bact_crit_percent <- Bact_crit[match(data$BacteriaCode, Bact_crit$BacteriaCode), "Perc_Crit"]
}
return(data)
}
clack_data <- CleanData(data_AWQMS)
clack_data <- add_criteria(clack_data)
clack_data_temp <- clack_data %>% filter(Char_Name == "Temperature, water")
clack_data_temp$exceed <- ifelse(clack_data_temp$Result_Numeric >= clack_data_temp$temp_crit, TRUE, FALSE)
clack_data_ph <- clack_data %>% filter(Char_Name == "pH")
clack_data_temp <- clack_data_temp %>% filter(!is.na(exceed))
clack_data_ph$exceed <- ifelse(clack_data_ph$Result_Numeric >= clack_data_ph$pH_crit_min & clack_data_ph$Result_Numeric <= clack_data_ph$pH_crit_max, FALSE, TRUE)
clack_data_ph <- clack_data_ph %>% filter(!is.na(exceed))
clack_data <- bind_rows(clack_data_temp, clack_data_ph)
status <- status_stns(clack_data)
trend <- trend_stns(clack_data)
seaKen <- sea_ken(filter(clack_data, MLocID %in% trend$MLocID))
temp_stations <- unique(c(status[status$Char_Name == "Temperature, water",]$MLocID, seaKen[seaKen$Char_Name == "Temperature, water",]$MLocID))
temp_plots <- list()
for(i in temp_stations){
plot_data <- clack_data %>% filter(Char_Name == "Temperature, water", MLocID == i)
p <- plot_temperature(plot_data, seaKen, i)
temp_plots[[i]] <- p
}
data <- plot_data
ymin <- min(c(data$Result_Numeric, data$temp_crit), na.rm = TRUE)
ymax <- max(c(data$Result_Numeric, data$temp_crit), na.rm = TRUE)
spawn_start <- unique(data$spawn_start)
spawn_end <- unique(data$spawn_end)
spawn_start <- lubridate::month(unique(data$spawn_start))
spawn_start <- unique(data$spawn_start)
spawn_end <- unique(data$spawn_end)
years <- unique(lubridate::year(data$sample_datetime))
rects <- geom_rect(aes(xmin=spawn_start, xmax=spawn_end, ymin=ymin*0.5, ymax=ymax*1.5))
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color=spawning, linetype=spawning, shape=spawning))
}
station <- i
}
station <- i
if(station %in% seaKen$MLocID){
slope <- seaKen[seaKen$MLocID == station, "slope"]
x_min <- min(data$sample_datetime, na.rm = TRUE)
x_max <- max(data$sample_datetime, na.rm = TRUE)
x_delta <- as.numeric((x_max-x_min)/2)
y_median <- median(data$Result_Numeric, na.rm = TRUE)
sk_min <- y_median - x_delta*slope/365.25
sk_max <- y_median + x_delta*slope/365.25
}
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color=spawning, linetype=spawning, shape=spawning))
}
p <- p +
scale_color_manual(values = c('TRUE' = 'red', 'FALSE' = 'black', "Trend" = 'blue', "Spawning" = 'black', "Non-Spawning" = 'black')) +
scale_linetype_manual(values = c('TRUE' = 0, 'FALSE' = 0, "Trend" = 1, "Spawning" = 2, "Non-Spawning" = 3)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 16, "Trend" = 32, "Spawning" = 32, "Non-Spawning" = 32))
p
p+rects
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color=spawning, linetype=spawning, shape=spawning))
}
p <- p +
scale_color_manual(values = c('TRUE' = 'red', 'FALSE' = 'black', "Trend" = 'blue', "Spawning" = 'black', "Non-Spawning" = 'black')) +
scale_linetype_manual(values = c('TRUE' = 0, 'FALSE' = 0, "Trend" = 1, "Spawning" = 2, "Non-Spawning" = 3)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 16, "Trend" = 32, "Spawning" = 32, "Non-Spawning" = 32)) +
ylim(c(ymin, ymax))
p
p + rects
p + rects
rects <- data.frame(x1=as.POSIXct(paste(years, lubridate::month(spawn_start), lubridate::day(spawn_start), collapse = "-")),
x2=as.POSIXct(paste(years, lubridate::month(spawn_end), lubridate::day(spawn_end), collapse = "-")),
y1=-Inf, y2=Inf)
paste(years, lubridate::month(spawn_start), lubridate::day(spawn_start), collapse = "-")
rects <- data.frame(x1=as.POSIXct(paste0(years, "-", lubridate::month(spawn_start), "-", lubridate::day(spawn_start))),
x2=as.POSIXct(paste0(years, "-", lubridate::month(spawn_end), "-", lubridate::day(spawn_end))),
y1=-Inf, y2=Inf)
View(rects)
if(station %in% seaKen$MLocID){
slope <- seaKen[seaKen$MLocID == station, "slope"]
x_min <- min(data$sample_datetime, na.rm = TRUE)
x_max <- max(data$sample_datetime, na.rm = TRUE)
x_delta <- as.numeric((x_max-x_min)/2)
y_median <- median(data$Result_Numeric, na.rm = TRUE)
sk_min <- y_median - x_delta*slope/365.25
sk_max <- y_median + x_delta*slope/365.25
}
ymin <- min(c(data$Result_Numeric, data$temp_crit), na.rm = TRUE)
ymax <- max(c(data$Result_Numeric, data$temp_crit), na.rm = TRUE)
if(any(data$spawning == "Spawning")){
spawn_start <- unique(data$spawn_start)
spawn_end <- unique(data$spawn_end)
years <- unique(lubridate::year(data$sample_datetime))
rects <- data.frame(x1=as.POSIXct(paste0(years, "-", lubridate::month(spawn_start), "-", lubridate::day(spawn_start))),
x2=as.POSIXct(paste0(years, "-", lubridate::month(spawn_end), "-", lubridate::day(spawn_end))),
y1=-Inf, y2=Inf)
}
p <- ggplot(data) +
geom_point(aes(x=sample_datetime, y=Result_Numeric, color=exceed, linetype = exceed, shape=exceed)) +
ggtitle(paste(station)) +
ylab("Temperature (degrees C)") +
xlab("Datetime")
if(station %in% seaKen$MLocID){
p <- p + geom_segment(aes(x=x_min, xend=x_max, y=sk_min, yend=sk_max, color = "Trend", linetype = "Trend", shape = "Trend"))
}
if(any(!is.na(data$temp_crit))){
p <- p + geom_line(aes(x=sample_datetime, y=temp_crit, color=spawning, linetype=spawning, shape=spawning))
}
p <- p +
scale_color_manual(values = c('TRUE' = 'red', 'FALSE' = 'black', "Trend" = 'blue', "Spawning" = 'black', "Non-Spawning" = 'black')) +
scale_linetype_manual(values = c('TRUE' = 0, 'FALSE' = 0, "Trend" = 1, "Spawning" = 2, "Non-Spawning" = 3)) +
scale_shape_manual(values = c('TRUE' = 16, 'FALSE' = 16, "Trend" = 32, "Spawning" = 32, "Non-Spawning" = 32)) +
ylim(c(ymin, ymax))
p
p + geom_rect(aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2))
p + geom_rect(data = rects, aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2))
p + geom_rect(data = rects, aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color = "grey", alpha=.5)
p + geom_rect(data = rects, aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color = "none", alpha=.3, fill='grey')
p + geom_rect(data = rects, aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color = NA, alpha=.3, fill='grey')
p + geom_rect(data = rects, aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color = NA, alpha=.5, fill='grey')
p + geom_rect(data = rects, aes(xmin=x1, xmax=x2, ymin=y1, ymax=y2), color = NA, alpha=.4, fill='grey')
