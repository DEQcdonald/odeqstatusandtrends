DO_trend <- c(unique(DO_trend$Station_ID))
}
DO_stat <- status %>%
dplyr::filter(Analyte == "Dissolved Oxygen")
DO_stat <- c(unique(DO_stat$Station_ID))
DO_stns <- unique(append(DO_trend, DO_stat))
if(length(DO_stns) > 0) {
df.DO <- df.all[df.all$Analyte == 'Dissolved Oxygen',]
results_seaken <- SeaKen %>% filter(analyte == 'Dissolved Oxygen')
in_bentable <- (Ben_use_LU[Ben_use_LU$Station_ID %in% DO_stns, c('Station_ID', 'DO_use', 'spwn_time')])
df.DO <- merge(df.DO,in_bentable, by.x = "Station_ID", by.y = "Station_ID")
if(any(is.na(df.DO$DO_use) | is.na(df.DO$spwn_time))) {
print("In order to assess against water quality standard, need to add Dissolved Oxygen beneficial uses and spawning time periods to stations.csv for stations:")
print(unique(df.DO[(is.na(df.DO$DO_use) | is.na(df.DO$spwn_time)),c("Station_ID")]))
break
}
DO_list<- list()
DO_exclist<- list()
DO_plots <-list()
for(j in 1: length(DO_stns)) {
new_data <- df.DO[df.DO$Station_ID == DO_stns[j],]
DO_sat_data <-df.all %>%
dplyr::filter(Analyte == 'Dissolved oxygen saturation') %>%
dplyr::filter(Station_ID == DO_stns[j])
DO_evaluate <- EvaluateDOWQS(new_data = new_data,
DOsat = DO_sat_data,
selectUseDO = unique(new_data$DO_use),
selectSpawning = unique(new_data$spwn_time),
analyte_column = 'Analyte',
station_id_column = 'Station_ID',
station_desc_column = 'Station_Description',
datetime_column = 'Sampled',
result_column = 'Result',
datetime_format = '%Y-%m-%d %H:%M:%S')
DO_eval <- attr(DO_evaluate, 'ex_df')
DO_list[[j]] <- DO_evaluate
DO_exclist[[j]] <- DO_eval
trend_logic <-ifelse(grepl("Not Significant",
results_seaken[results_seaken$Station_ID == DO_stns[j],'signif']),
FALSE,
ifelse(grepl("Need at least 8 years",
results_seaken[results_seaken$Station_ID == DO_stns[j],'signif']),
FALSE,
TRUE))
# Tualatin stations that are not supposed to have trend
if(DO_stns[j] %in% c('USGS-14202980', 'USGS-14206694', 'USGS-453004122510301', 'USGS-453030122560101', 'USGS-453040123065201')) {
trend_logic <- FALSE }
b <- plot.DO(new_data = DO_evaluate,
selectUseDO = unique(DO_evaluate$DO_use),
sea_ken_table = results_seaken,
plot_trend = trend_logic,
selectSpawning = unique(DO_evaluate$spwn_time),
analyte_column = 'Analyte',
station_id_column = 'Station_ID',
station_desc_column = 'Station_Description',
datetime_column = 'Sampled',
result_column = 'Result',
datetime_format = '%Y-%m-%d %H:%M:%S',
parm = 'Dissolved Oxygen')
DO_plots[[j]]<-b
print(DO_plots[[j]])
DO_captions[[j]] <- paste0('Station ', DO_stns[j], ' Dissolved Oxygen water quality status and/or trends.')
cap.names[[j]] <- paste0("DO.",DO_stns[j])
cat('\n\n')
}
DO <-rbind.fill(DO_list[])
exc <-rbind.fill(DO_exclist[])
exc$Percent_Exceedance <- (exc$Exceedances/exc$Obs) * 100
colnames(exc) <- c("Station ID", "Station Description", "Observations", "Exceedances",
"Meets b/c %Sat", "Min Year", "Max Year", "Percent Exceedance")
knitr::kable(exc, padding = 2, digits = 1, row.names = FALSE,
caption = tbls(name = "doExcTable", caption = "Dissolved Oxygen status."))
}
DO_exc <- exc
knitr::include_graphics(paste0("Figures/",station_summary_map1_file))
knitr::include_graphics(paste0("Figures/",station_summary_map2_file))
knitr::include_graphics(paste0("Figures/",station_summary_map_DO_file))
knitr::include_graphics(path = paste0("Figures/",station_summary_map_ecoli_file))
knitr::include_graphics(path = paste0("Figures/",station_summary_map_entero_file))
knitr::include_graphics(path = paste0("Figures/",station_summary_map_temp_file))
knitr::include_graphics(path = paste0("Figures/",station_summary_map_pH_file))
knitr::include_graphics(path = paste0("Figures/",station_summary_map_tp_file))
knitr::include_graphics(path = paste0("Figures/",station_summary_map_tss_file))
stns_param_summary <-  parm_summary(stns = stns[,c(1:4)],
ecoli = ecoli,
entero = entero,
pH = pH,
DO = DO,
temp = temp,
tp = TP,
tss = TSS,
SeaKen = SeaKen,
status.years = status_years,
status = status,
trend = trend)
# create a shapefile
stns_param_summary_shp <- stns_param_summary %>%
#dplyr::select(-c(TP_S, TSS_S)) %>%
dplyr::rename(Name=Station_Description,
Latitude=DECIMAL_LAT,
Longitude=DECIMAL_LONG)
coordinates(stns_param_summary_shp)=~Longitude+Latitude
# NAD83 : EPSG:4269 <- This is assumed for DATUM
proj4string(stns_param_summary_shp) <- CRS("+init=epsg:4269")
# sort by station ID
stns_param_summary_shp <- stns_param_summary_shp[order(stns_param_summary_shp$Station_ID),]
# write the shapefile
writeOGR(obj=stns_param_summary_shp, dsn=GIS_dir, layer="station_param_summary", driver="ESRI Shapefile", overwrite_layer=TRUE)
# format for table
stns_param_summary_tbl <- dplyr::select(stns_param_summary, -c(DECIMAL_LAT, DECIMAL_LONG))
colnames(stns_param_summary_tbl) <- c("Station ID", "Station Description",
"DO Status", "DO Trend",
"_E. coli_  Status", "_E. coli_ Trend",
"_Enterococcus_ Status", "_Enterococcus_ Trend",
"pH Status", "pH Trend",
"Temperature Status", "Temperature Trend",
"TP Status","TP Trend",
"TSS Status","TSS Trend")
save(stns_param_summary, file=paste0(Rdata_dir,"/", stns_param_summary_file))
knitr::kable(stns_param_summary_tbl,
padding = 2, digits = 3,
row.names = FALSE,
caption = tbls(name = "parmSumTable",
caption = "Summary of monitoring stations status and trend, where 'Exceeds' represents a single exceedance of the water quality standard or TMDL target within the last two whole years. Note: DO = dissolved oxygen, TP = total phosphorus, TSS = total suspended solids."))
library(odeqstatusandtrends)
setwd("//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends")
getwd()
library(roxygen2)
document()
library(devtools)
document()
library(odeqstatusandtrends)
library(knitr)
knitr::opts_chunk$set(echo = FALSE,
message = FALSE,
warning=FALSE,
error = FALSE,
cache = FALSE,
include = TRUE,
fig.keep='all',
fig.path='Figures/'
)
library(RODBC)
library(RCurl)
library(XML)
library(dataRetrieval)
library(plyr)
library(sp)
library(rgdal)
library(raster)
library(rgeos)
library(DT)
library(wq)
library(chron)
library(reshape)
library(reshape2)
library(ggplot2)
library(ggthemes)
library(zoo)
library(spatialEco)
library(dplyr)
library(lubridate)
library(ggthemes)
library(captioner)
library(plyr)
library(tidyr)
library(leaflet)
source('functions/funDataQuery.R')
source("functions/funHelpers.R")
source("functions/funClean.R")
source("functions/funSeaKen.R")
source("functions/funPlots.R")
source('functions/TualatinR_Allocations.R')
source('functions/funConclusions.R')
tbls  <- captioner(prefix="Table")
figs <- captioner(prefix="\nFigure")
# agwqma, query_dates, and project_dir are different for every Report. Note 'agwqma' must be named exactly
# how it is named in the agwqma shapefile ('agwqma_all_shp').
agwqma <- "South Santiam"
query_dates <- c("2000-01-01", "2019-01-01")
project_dir <-  "//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/South Santiam/2018-South-Santiam"
# Set to TRUE if knitting a word document
word_output <- TRUE
# Set to TRUE if you want individual parameter summary maps for each parameter
split_param_summary <- FALSE
# Everything below here should not change
support_files_dir <- "//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/R_support_files"
Rdata_dir <- paste0(project_dir,"/RData")
GIS_dir <- paste0(project_dir,"/GIS")
# Name of input map files
landuse_map_file <- paste0(gsub(" ", "_", agwqma), "_landuse_map.png")
station_map_file <- paste0(gsub(" ", "_", agwqma), "_station_map.png")
station_summary_map1_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map1.png")
station_summary_map2_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map2.png")
station_summary_map_DO_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map_DO.png")
station_summary_map_pH_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map_pH.png")
station_summary_map_temp_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map_temp.png")
station_summary_map_ecoli_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map_ecoli.png")
station_summary_map_entero_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map_entero.png")
station_summary_map_tss_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map_tss.png")
station_summary_map_tp_file <- paste0(gsub(" ", "_", agwqma), "_station_summary_map_tp.png")
# Name of output files
df_all_raw_file <- paste0(gsub(" ", "_", agwqma), "_df_all_raw_",paste(query_dates, collapse = "."), ".Rdata")
df_all_clean_file <- paste0(gsub(" ", "_", agwqma), "_df_all_clean_",paste(query_dates, collapse = "."), ".Rdata")
duplicates_file <- paste0(gsub(" ", "_", agwqma), "_duplicates_",paste(query_dates, collapse = "."), ".Rdata")
landuse_file <- paste0(gsub(" ", "_", agwqma), "_landuse.Rdata")
stns_file <- paste0(gsub(" ", "_", agwqma), "_stns.Rdata")
status_file <- paste0(gsub(" ", "_", agwqma), "_status.Rdata")
trend_file <- paste0(gsub(" ", "_", agwqma), "_trend.Rdata")
stns_param_summary_file <- paste0(gsub(" ", "_", agwqma), "_station_param_summary.Rdata")
# Sets up checks for Executive Summary generation
Executive_Summary_check <- Reduce("&", file.exists(paste0(Rdata_dir,"/", landuse_file), paste0(Rdata_dir,"/", stns_param_summary_file)))
input <- list(action_button = c(0))
input$select <- agwqma
input$dates <- query_dates
input$parms <- c('Total Phosphorus',
'Total Suspended Solids',
'Total Suspended Solids',
'Bacteria',
'Temperature',
'pH',
'Dissolved Oxygen'
# ,
# 'Total Nitrogen'
)
# Check if the local GIS directory exists
if (!file.exists(paste0(project_dir,"/GIS"))) {
dir.create(paste0(project_dir,"/GIS"))
}
# Check if the local RData directory exists
if (!file.exists(paste0(project_dir,"/RData"))) {
dir.create(paste0(project_dir,"/RData"))
}
# Check if the local Figures directory exists
if (!file.exists(paste0(project_dir,"/Figures"))) {
dir.create(paste0(project_dir,"/Figures"))
}
# import github Lookups
BC_LU <- read.csv("Lookups/BC_LU.csv")
Conc_LU <- read.csv("Lookups/Conclusions_LU.csv", na.strings = c("", "NA"))
OAR_LU <- read.csv("Lookups/OAR_LU.csv")
Ben_use_LU <- read.csv("Lookups/stations.csv", na.strings = c("", "NA"))
wq_limited <- read.csv('Lookups/wq_limited_2012_df_temp_bact_ph_DO_TP_Sediment.csv')
HUClist <- read.csv('Lookups/PlanHUC_LU.csv')
stations_huc <- read.csv('Lookups/station_wbd_12132016.csv')
ph_crit <- read.csv('Lookups/PlanOWRDBasinpH_LU.csv')
lu_parms <- read.csv('Lookups/WQP_Table3040_Names.csv', stringsAsFactors = FALSE)
ph_crit <- merge(ph_crit, HUClist, by.x = 'plan_name', by.y = 'PlanName', all.x = TRUE)
# import GIS features
agwqma_all_shp <- readOGR(dsn = support_files_dir, layer = 'ODA_AgWQMA', integer64="warn.loss", verbose = FALSE)
agwqma_shp <- agwqma_all_shp[agwqma_all_shp$PlanName == agwqma,]
tribal_lands_shp <- readOGR(dsn = support_files_dir, layer = 'tl_2017_or_aiannh', integer64="warn.loss", verbose = FALSE)
wql_streams_shp <- readOGR(dsn = support_files_dir, layer = 'WQL_Streams_2012', integer64="warn.loss", verbose = FALSE)
View(lu_parms)
wql_streams_shp <- spTransform(wql_streams_shp, CRS("+proj=longlat +datum=NAD83"))
# Import Bacteria nonfreshwater GIS feature
bacteria_nonfreshwater_shp <- readOGR(dsn = support_files_dir, layer = 'bacteria_nonfreshwater', integer64="warn.loss", verbose = FALSE)
#hucs_shp <- readOGR(dsn = support_files_dir, layer = 'WBD_HU8', integer64="warn.loss", verbose = FALSE)
# Import other data frames
load(paste0(support_files_dir,'/NLCD2011_OR.Rdata'))
load(paste0(support_files_dir,'/OR_cats.Rdata'))
#### Get characteristics ####
# The entire list of parameters that match to a criteria
parms <- data.frame("General", "AWQMS.Name"
"TSS", "Total suspended solids",
"Temperature", "Temperature, water",
"TP", "Phosphorus",
"pH", "pH",
"Fecal Coliform", "Fecal Coliform"
"Ecoli", "Escherichia coli",
"Enterococcus", "Enterococcus",
"DO", "Dissolved oxygen (DO)")
#### Get characteristics ####
# The entire list of parameters that match to a criteria
parms <- data.frame("General", "AWQMS.Name",
"TSS", "Total suspended solids",
"Temperature", "Temperature, water",
"TP", "Phosphorus",
"pH", "pH",
"Fecal Coliform", "Fecal Coliform"
"Ecoli", "Escherichia coli",
"Enterococcus", "Enterococcus",
"DO", "Dissolved oxygen (DO)")
#### Get characteristics ####
# The entire list of parameters that match to a criteria
parms <- data.frame(General = c("TSS",
"Temperature",
"TP",
"pH",
"Fecal Coliform",
"Ecoli",
"Enterococcus",
"DO"),
AWQMS.Name = c("Total suspended solids",
"Temperature, water",
"Phosphorus",
"pH",
"Fecal Coliform"
"Escherichia coli",
"Enterococcus",
"Dissolved oxygen (DO)"),
)
#### Get characteristics ####
# The entire list of parameters that match to a criteria
parms <- data.frame(General = c("TSS",
"Temperature",
"TP",
"pH",
"Fecal Coliform",
"Ecoli",
"Enterococcus",
"DO"),
AWQMS.Name = c("Total suspended solids",
"Temperature, water",
"Phosphorus",
"pH",
"Fecal Coliform"
"Escherichia coli",
"Enterococcus",
"Dissolved oxygen (DO)")
)
#### Get characteristics ####
# The entire list of parameters that match to a criteria
parms <- data.frame(General = c("TSS",
"Temperature",
"TP",
"pH",
"Fecal Coliform",
"Ecoli",
"Enterococcus",
"DO"),
AWQMS.Name = c("Total suspended solids",
"Temperature, water",
"Phosphorus",
"pH",
"Fecal Coliform",
"Escherichia coli",
"Enterococcus",
"Dissolved oxygen (DO)")
)
View(parms)
match(Ecoli, parms)
match("Ecoli", parms)
match("Ecoli", parms$General)
parameters <- c("Ecoli", "TSS", "DO")
lapply(parameters, gsub(x, parms[match(x, parms$General),"AWQMS.Name"], parameters))
lapply(parameters, function(x) gsub(x, parms[match(x, parms$General),"AWQMS.Name"], parameters))
AWQMS.parms <- lapply(parameters, function(x) gsub(x, parms[match(x, parms$General),"AWQMS.Name"], parameters))
View(AWQMS.parms)
AWQMS.parms <- lapply(parameters, function(x) parms[match(x, parms$General),"AWQMS.Name"])
View(AWQMS.parms)
AWQMS.parms <- parms[parms$General %in% parameters,"AWQMS.Name"])
AWQMS.parms <- parms[parms$General %in% parameters,"AWQMS.Name"]
AWQMS.parms
parameters
parameters <- c(parameters, "Bacteria")
parmeters
parameters
# Expand bacteria to include fecal and enterococcus
if(any(parameters == 'Bacteria')) {
parameters <- c(parameters, c('Ecoli','Fecal coliform','Enterococcus'))
parameters <- parameters[parameters != "Bacteria"]
}
parameters
parameters <- c(parameters, "Bacteria")
# Expand bacteria to include fecal and enterococcus
if(any(parameters == 'Bacteria')) {
parameters <- c(parameters, c('Ecoli','Fecal coliform','Enterococcus'))
parameters <- unique(parameters[parameters != "Bacteria"])
}
parameters
getwd()
document()
getwd()
document()
document()
document()
document()
library(odeqstatusandtrends)
??GetStations()
getwd()
setwd("..")
getwd()
install("odeqstatusandtrends")
library(odeqstatusandtrends)
library(odeqstatusandtrends)
getwd()
install("odeqstatusandtrends")
library(odeqstatusandtrends)
GetStations(agwqma_shp)
document()
getwd()
setwd("./odeqstatusandtrends")
getwd()
document()
library(odeg)
library(odeqstatusandtrends)
GetStations(agwqma_shp)
getwd()
document()
library(odeqstatusandtrends)
GetStations(agwqma_shp)
setwd("..")
getwd()
install("odeqstatusandtrends")
library(odeqstatusandtrends)
GetStations(agwqma_shp)
stations.channel.name = "STATIONS"
# Get Stations within Hucs from station database
stations.channel <- RODBC::odbcConnect(stations.channel.name)
s.time <- Sys.time()
stations <- RODBC::sqlQuery(stations.channel, "SELECT * FROM VWStationsFinal", na.strings = "NA")
e.time <- Sys.time()
print(e.time-s.time)
StationsInPoly(stations, agwqma_shp, outside = FALSE)
stations <- StationsInPoly(stations, agwqma_shp, outside = FALSE)
View(stations)
stations <- RODBC::sqlQuery(stations.channel, "SELECT * FROM VWStationsFinal", na.strings = "NA")
View(stations)
# make a spatial object
df.shp <- stations[,c("MLocID", "Datum", "Lat_DD", "Long_DD")]
sp::coordinates(df.shp)=~Long_DD+Lat_DD
df.nad83 <- df.shp[!grepl("NAD27|4267|WGS84|4326",toupper(df.shp$Datum)), ]
df.nad27 <- df.shp[grepl("NAD27|4267",toupper(df.shp$Datum)), ]
df.wgs84 <- df.shp[grepl("WGS84|4326",toupper(df.shp$Datum)), ]
sp::proj4string(df.nad27) <- sp::CRS("+init=epsg:4267")
sp::proj4string(df.nad83) <- sp::CRS("+init=epsg:4269")
sp::proj4string(df.wgs84) <- sp::CRS("+init=epsg:4326")
# convert to NAD 83
if (nrow(df.nad27)>0) {
df.nad.27.nad83 <- sp::spTransform(df.nad27, sp::CRS("+init=epsg:4269"))
df.nad83 <- rbind(df.nad83, df.nad.27.nad83)
}
if (nrow(df.wgs84)>0) {
df.wgs84.nad83 <- sp::spTransform(df.wgs84, sp::CRS("+init=epsg:4269"))
df.nad83 <- rbind(df.nad83, df.wgs84.nad83)
}
poly.nad83 <- sp::spTransform(polygon, sp::CRS("+init=epsg:4269"))
polygon <- agwqma_shp
poly.nad83 <- sp::spTransform(polygon, sp::CRS("+init=epsg:4269"))
outside=FALSE
if(outside) {
# stations outside polygon
# df.out <- df.nad83[!stats::complete.cases(grDevices::over(df.nad83, poly.nad83)),]@data
# stations.out <- unique(df.out$MLocID)
stations.out <- unique(df.nad83[!df.nad83$MLocID %in% unique(df.nad83[poly.nad83,]@data$MLocID),]@data)
return(stations.out)
} else {
stations.in <- unique(df.nad83[poly.nad83,]@data)
return(stations.in)
}
View(stations.in)
getwd()
setwd("./odeqstatusandtrends")
getwd()
document()
document()
setwd("..")
install("odeqstatusandtrends")
library(odeqstatusandtrends)
GetData(agwqma_shp)
GetStat(agwqma_shp)
detach("package:odeqstatusandtrends", unload=TRUE)
library("odeqstatusandtrends", lib.loc="~/R/win-library/3.5")
GetStations(agwqma_shp)
stations <- GetStations(agwqma_shp)
parameters <- c("Bacteria", "Temperature", "DO")
start.date <- "01-01-2015"
end.date <- "01-01-2019"
data <- GetData(parameters, stations, start.date, end.date)
View(stations)
data <- GetData(parameters, stations$MLocID, start.date, end.date)
View(data)
setwd("..")
getwd()
setwd("./statusandtrends_package")
getwd()
install("odeqstatusandtrends")
data <- GetData(parameters, stations$MLocID, start.date, end.date)
print(paste('Querying', length(stations$MLocID), 'stations from AWQMS for water quality data related to ', paste(parameters)))
print(paste('Querying', length(stations$MLocID), 'stations from AWQMS for water quality data related to ', paste(parameters, collapse = "")))
print(paste('Querying', length(stations), 'stations from AWQMS for water quality data related to ', paste(parameters, collapse = ", ")))
setwd("..")
install("odeqstatusandtrends")
install(odeqstatusandtrends)
getwd()
setwd("./statusandtrends_package")
install("odeqstatusandtrends")
data <- GetData(parameters, stations$MLocID, start.date, end.date)
paste("this took", e.time-s.time)
getwd()
setwd("./odeqstatusandtrends")
getwd()
document()
View(data)
unique(data$SampleStartTZ)
# Add datum and datetime columns and remove unused variables
data$datum <- 'Assumed NAD83'
data$sample_datetime <- paste(data$SampleStartDate, data$SampleStartTime)
data$sample_datetime <- as.POSIXct(data$sample_datetime, tz = data$SampleStartTZ, format = '%Y-%m-%d %H:%M:%S')
unique(data$SampleStartTZ)
data$sample_datetime <- as.POSIXct(data$sample_datetime, format = '%Y-%m-%d %H:%M:%S')
print("Checking for any missing start times...")
print(any(is.na(data$SampleStartTime)))
data <- data[, c('MLocID', 'StationDes', 'OrganizationID','Lat_DD', 'Long_DD', 'HUC8', 'Char_Name', 'Result', 'Result_Unit', 'Statistical_Base',
'QualifierAbbr', 'Activity_Type', 'MRLValue', 'Result_status', 'General_Comments')]
# Remove all Dissolved Oxygen summary statistics from analysis except for 'Minimum'
data <- data %>% dplyr::filter(!(Char_Name == "Dissolved oxygen" & Statistical_Base %in% c('7DADM', 'Maximum', 'Mean', '7DADMean', '7DADMin', '30DADMean')))
print("Confirming that all Monitoring Location IDs have consistent descriptions and Lat/Longs...")
unique_stations_check <- data %>% dplyr::group_by(MLocID) %>% dplyr::summarise(n_unique = length(unique(c(StationDes, Lat_DD, Long_DD, HUC8))))
print(any(unique_stations_check$n_unique > 1))
View(unique_stations_check)
