map
map <- map %>%
addLayersControl(baseGroups = sort(unique(param_summary$Char_Name)),
overlayGroups = c("Assessment Area", "WQ Listed Streams", "World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
hideGroup(c("World Imagery", "Hydrography", "Land Cover (NLCD 2016)", "WQ Listed Streams")) %>%
addEasyButton(easyButton(
icon = "fa-globe",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup('Assessment Area');
map.fitBounds(groupLayer.getBounds());
}"))) %>%
addEasyButton(easyButton(
icon = "fa-map-signs",
title = "Toggle Station ID labels",
onClick = JS("function(btn, map){
var elements = document.getElementsByClassName('stationLabels');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
}"
)
)) %>%
addEasyButton(easyButton(
icon = "fa-sitemap",
title = "Toggle Assessment Units",
onClick = JS("function(btn, map){
var elements = document.getElementsByClassName('assessmentUnits');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
}"
)
)) %>%
addEasyButton(easyButton(
icon = "fa-map-marker",
title = "Toggle Station Markers",
onClick = JS("function(btn, map){
var elements = document.getElementsByClassName('leaflet-pane leaflet-marker-pane');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
var shadows = document.getElementsByClassName('leaflet-pane leaflet-shadow-pane');
var index;
shadows = shadows.length ? shadows : [shadows];
for (index = 0; index < shadows.length; index++) {
shadow = shadows[index];
if (isElementHidden(shadow)) {
shadow.style.display = '';
// If the shadow is still hidden after removing the inline display
if (isElementHidden(shadow)) {
shadow.style.display = 'block';
}
} else {
shadow.style.display = 'none';
}
}
function isElementHidden(shadow) {
return window.getComputedStyle(shadow, null).getPropertyValue('display') === 'none';
}
}"
)
)) %>%
leaflet.extras::addSearchFeatures(targetGroups = "search",
options = searchFeaturesOptions(openPopup = TRUE, textPlaceholder = "Search Station IDs...")) %>%
htmlwidgets::onRender(jsCode = "function(el, x){
var elements = document.getElementsByClassName('stationLabels');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
}") %>% hideGroup("search")
map
map <- leaflet() %>% addTiles() %>%
addProviderTiles(providers$Esri.WorldImagery, group = "World Imagery") %>%
addWMSTiles(baseUrl = 'https://www.mrlc.gov/geoserver/mrlc_display/NLCD_2016_Land_Cover_L48/wms?',
group = "Land Cover (NLCD 2016)",
layers = "NLCD_2016_Land_Cover_L48",
options = WMSTileOptions(version = '1.3.0',
format = 'image/png',
transparent = TRUE)) %>%
addWMSTiles("https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WmsServer",
group = "Hydrography",
options = WMSTileOptions(format = "image/png",
transparent = TRUE),
layers = "0") %>%
addPolygons(data = area, fill = FALSE, group = "Assessment Area") %>%
addMarkers(data = unique(param_summary[,c("AU_ID", "MLocID", "StationDes", "Lat_DD", "Long_DD")]),
label = ~paste0(MLocID, ": ", StationDes),
popup = ~paste0("<b>", MLocID, "</b>: ", StationDes, "<br>",
"AU: ", AU_ID),
lat = ~Lat_DD,
lng = ~Long_DD,
group = "search"
)
if(nrow(wql_streams_data)>0){
map <- map %>%
addPolylines(data = wql_streams_shp,
opacity = 1,
weight = 3.5,
color = "red",
# popup = ~paste0("<b>", STREAM_NAM,
#                 "<br>Parameter:</b> ", Char_Name,
#                 "<br><b>Listing:</b> ", LISTING_ST),
popup = ~paste0("<b>", STREAM_NAM,
# "<br>Parameter:</b> ", Char_Name,
"<br></b><br>",
sapply(SEGMENT_ID, WQLpopupTable, param = i, USE.NAMES = FALSE)),
popupOptions = popupOptions(maxWidth = 1200),
highlightOptions = highlightOptions(color = "red", weight = 8, opacity = 1),
label = ~STREAM_NAM,
smoothFactor = 1.5,
group = "WQ Listed Streams"
)
} else {print(paste("No water quality limited streams for", i))}
print(paste("Adding layer for", i))
psum <- param_summary %>% dplyr::filter(Char_Name == i)
psum$z_offset <- if_else(!(psum[[status_current]] %in% c("Unassessed", "Insufficient Data") & psum$trend %in% c("Insufficient Data", "No Significant Trend")),
100, 0)
psum_AU <- psum[!(psum[[status_current]] %in% c("Unassessed", "Insufficient Data") & psum$trend == "Insufficient Data"),]
au_data <- dplyr::filter(assessment_units[, c("AU_ID", "AU_Name")], AU_ID %in% unique(psum_AU$AU_ID))
au_data <- merge(au_data, dplyr::filter(au_colors, Char_Name == i)[,c("AU_ID", "color")], by = "AU_ID")
map <- map %>%
addAwesomeMarkers(data = psum,
lat = ~Lat_DD,
lng = ~Long_DD,
icon = awesomeIcons(icon = ~icon,
iconColor = 'black',
library = 'glyphicon',
markerColor = ~color),
label = ~MLocID,
popup = ~paste0("<b>", StationDes, "<br>ID:</b> ", MLocID,
"<br><b>AU ID:</b> ", AU_ID,
"<br>",
sapply(MLocID, popupTable, AU = NULL, param = i, USE.NAMES = FALSE)),
popupOptions = popupOptions(maxWidth = 1200),
labelOptions = list(className = "stationLabels", noHide = T, permanent = T, interactive = T,
offset = c(-10,-25), opacity = 0.9, textsize = "14px", sticky = TRUE),
options = ~markerOptions(zIndexOffset = z_offset),
group = i
)
map <- map %>%
addLayersControl(baseGroups = sort(unique(param_summary$Char_Name)),
overlayGroups = c("Assessment Area", "WQ Listed Streams", "World Imagery", "Hydrography", "Land Cover (NLCD 2016)")) %>%
hideGroup(c("World Imagery", "Hydrography", "Land Cover (NLCD 2016)", "WQ Listed Streams")) %>%
addEasyButton(easyButton(
icon = "fa-globe",
title = "Zoom to assessment area",
onClick = JS("function(btn, map){
var groupLayer = map.layerManager.getLayerGroup('Assessment Area');
map.fitBounds(groupLayer.getBounds());
}"))) %>%
addEasyButton(easyButton(
icon = "fa-map-signs",
title = "Toggle Station ID labels",
onClick = JS("function(btn, map){
var elements = document.getElementsByClassName('stationLabels');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
}"
)
)) %>%
addEasyButton(easyButton(
icon = "fa-sitemap",
title = "Toggle Assessment Units",
onClick = JS("function(btn, map){
var elements = document.getElementsByClassName('assessmentUnits');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
}"
)
)) %>%
addEasyButton(easyButton(
icon = "fa-map-marker",
title = "Toggle Station Markers",
onClick = JS("function(btn, map){
var elements = document.getElementsByClassName('leaflet-pane leaflet-marker-pane');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
var shadows = document.getElementsByClassName('leaflet-pane leaflet-shadow-pane');
var index;
shadows = shadows.length ? shadows : [shadows];
for (index = 0; index < shadows.length; index++) {
shadow = shadows[index];
if (isElementHidden(shadow)) {
shadow.style.display = '';
// If the shadow is still hidden after removing the inline display
if (isElementHidden(shadow)) {
shadow.style.display = 'block';
}
} else {
shadow.style.display = 'none';
}
}
function isElementHidden(shadow) {
return window.getComputedStyle(shadow, null).getPropertyValue('display') === 'none';
}
}"
)
)) %>%
leaflet.extras::addSearchFeatures(targetGroups = "search",
options = searchFeaturesOptions(openPopup = TRUE, textPlaceholder = "Search Station IDs...")) %>%
htmlwidgets::onRender(jsCode = "function(el, x){
var elements = document.getElementsByClassName('stationLabels');
var index;
elements = elements.length ? elements : [elements];
for (index = 0; index < elements.length; index++) {
element = elements[index];
if (isElementHidden(element)) {
element.style.display = '';
// If the element is still hidden after removing the inline display
if (isElementHidden(element)) {
element.style.display = 'block';
}
} else {
element.style.display = 'none';
}
}
function isElementHidden (element) {
return window.getComputedStyle(element, null).getPropertyValue('display') === 'none';
}
}") %>% hideGroup("search")
map
source('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R/parameter_summary_map.R', echo=TRUE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"), title = paste(name, "Status and Trends Map"), background = "grey", selfcontained = FALSE)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"), title = paste(name, "Status and Trends Map"), background = "grey", selfcontained = FALSE)
name <- "Willamette"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/NHD/NHDH_ORDEQ/NHDH_ORDEQ.gdb",
layer = 'WBDHU6', integer64="warn.loss", verbose = FALSE)
# basin_shp <- basin_shp[basin_shp$Name %in% c("Siletz-Yaquina", "Alsea", "Siuslaw", "Siltcoos"), ]
basin_shp <- basin_shp[basin_shp$Name %in% c("Willamette"), ]
stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
param_sum_stn <- read.csv(paste0(project_dir, name, "_param_summary_by_station.csv"))
param_sum_au <- read.csv(paste0(project_dir, name, "_param_summary_by_AU.csv"), stringsAsFactors = FALSE)
param_sum_stn <- read.csv(paste0(project_dir, name, "_param_summary_by_station.csv"), stringsAsFactors = FALSE)
map <- parameter_summary_map(param_summary = param_sum_stn, au_param_summary = param_sum_au, area = basin_shp)
htmlwidgets::saveWidget(map, paste0(project_dir, name, "_param_map.html"), title = paste(name, "Status and Trends Map"), background = "grey", selfcontained = FALSE)
devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
devtools::install_github('donco/odeqassessment', host = 'https://api.github.com')
library(rgdal)
#library(RODBC)
library(dplyr)
# devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
library(odeqstatusandtrends)
# devtools::install_github('donco/odeqassessment', host = 'https://api.github.com')
library(odeqassessment)
# devtools::install_github('rmichie/wqdb/wqdb', host = 'https://api.github.com')
library(wqdb)
# devtools::install_github("TravisPritchardODEQ/AWQMSdata", host = "https://api.github.com")
library(AWQMSdata)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(tidyr)
library(htmltools)
library(captioner)
library(sf)
library(leaflet)
library(leaflet.extras)
library(knitr)
library(kableExtra)
library(htmlwidgets)
library(rmapshaper)
setwd('//deqhq1/WQNPS/Agriculture/Status_and_Trend_Analysis/StatusAndTrends_Package/odeqstatusandtrends/R')
library(roxygen2)
devtools::document()
devtools::document()
devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
# devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com')
library(odeqstatusandtrends)
start.date = "2000-01-01"
end.date = "2019-01-01"
query_dates <- c(start.date, end.date)
name <- "Clackamas NWQI"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
name <- "Clackamas-NWQI"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
name <- "Clackamas-NWQI"
project_dir <- paste0('//deqhq1/WQNPS/Status_and_Trend_Reports/2019/2019-', name, '/')
# basin_shp <- readOGR(dsn = "//deqhq1/GISLIBRARY/Base_Data/Hydrography/NHD/NHDH_ORDEQ/NHDH_ORDEQ.gdb",
#                      layer = 'WBDHU6', integer64="warn.loss", verbose = FALSE)
basin_shp <- readOGR(dsn = "//deqhq1/dwp-public/SpecialProjects/NRCS_NWQI",
layer = 'ClackamasNWQIProposedArea_5HUCs_dissolve', integer64="warn.loss", verbose = FALSE)
plot(basin_shp)
stations_AWQMS <- get_stations_AWQMS(basin_shp)
hucs <- unique(stations_AWQMS$HUC8)
stations_wqp <- get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
if(nrow(stations_wqp) > 0){
print("Add these stations to the Stations Database:")
print(stations_wqp)
}
# ss_stations_NWIS <- get_stations_NWIS(agwqma_shp)
data_raw <- GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = stations_AWQMS,
stations_WQP = stations_wqp,
# stations_NWIS = ss_stations_NWIS,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
wq_db <- paste0(project_dir, name,"_data_raw_",paste0(query_dates, collapse = "."),".db")
# create_wq_db(wq_db)
wqdb::write_wqdb(db = wq_db, awqms = data_raw, stations = stations_AWQMS)
unique(data_raw$SampleStartTZ)
data_raw[is.na(data_raw$SampleStartTZ), "SampleStartTZ"] <- NA_character_
unique(data_raw$SampleStartTZ)
rm(map)
# create_wq_db(wq_db)
wqdb::write_wqdb(db = wq_db, awqms = data_raw, stations = stations_AWQMS)
data_raw[is.na(data_raw$SampleStartTZ), "SampleStartTZ"] <- "unknown"
# create_wq_db(wq_db)
wqdb::write_wqdb(db = wq_db, awqms = data_raw, stations = stations_AWQMS)
data_raw[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", 141:149)] <-
stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
# ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
# data_raw <- bind_rows(data_raw, ent_data)
data <- CleanData(data_raw)
data <- add_criteria(data)
data_pH <- data %>% filter(Char_Name == "pH")
data_pH <- Censored_data(data_pH, criteria = 'pH_Min')
data_pH <- odeqassessment::pH_assessment(data_pH)
data_temp <- data %>% filter(Char_Name == "Temperature, water", Statistical_Base == "7DADM")
data_temp <- Censored_data(data_temp, criteria = "temp_crit")
data_temp <- odeqassessment::temp_assessment(data_temp)
data_TP <- data %>% filter(Char_Name == "Phosphate-phosphorus")
data_TP$TP_crit <- NA
data_TP <- Censored_data(data_TP, criteria = "TP_crit")
data_TP <- TP_assessment(data_TP)
data_TSS <- data %>% filter(Char_Name == "Total suspended solids")
data_TSS$TSS_crit <- NA
data_TSS <- Censored_data(data_TSS, criteria = "TSS_crit")
data_TSS <- TSS_assessment(data_TSS)
data_bact <- data %>% filter(Char_Name %in% AWQMS_Char_Names('bacteria'))
data_bact <- data_bact %>% mutate(bact_crit_min = pmin(bact_crit_ss, bact_crit_geomean, bact_crit_percent, na.rm = TRUE))
data_bact <- Censored_data(data_bact, criteria = "bact_crit_min")
data_ent <- Coastal_Contact_rec(data_bact)
data_eco <- Fresh_Contact_rec(data_bact)
data_shell <- Shell_Harvest(data_bact)
data_bact <- bind_rows(data_ent, data_eco, data_shell)
data_DO <- data %>% filter(Char_Name %in% c("Dissolved oxygen (DO)", "Dissolved oxygen saturation", "Temperature, water"))
data_DO <- Censored_data(data_DO, criteria = "DO_crit_min")
data_DO <- DO_assessment(data_DO)
pH_status <- status_stns(data_pH)
temp_status <- status_stns(data_temp)
TP_status <- status_stns(data_TP)
TSS_status <- status_stns(data_TSS)
bact_status <- status_stns(data_bact)
DO_status <- status_stns(data_DO)
status <- bind_rows(pH_status, temp_status, TP_status, TSS_status, bact_status, DO_status)
pH_trend <- trend_stns(data_pH)
temp_trend <- trend_stns(data_temp)
TP_trend <- trend_stns(data_TP)
TSS_trend <- trend_stns(data_TSS)
bact_trend <- trend_stns(data_bact)
DO_trend <- trend_stns(data_DO)
trend <- bind_rows(pH_trend, temp_trend, TP_trend, TSS_trend, bact_trend, DO_trend)
seaKen <- sea_ken(filter(data, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
param_sum_stn <- parameter_summary_by_station(status, seaKen, stations_AWQMS)
param_sum_au <- parameter_summary_by_au(status, seaKen, stations_AWQMS)
rm(data_raw)
rm(data)
rm(data_DO)
rm(data_pH)
rm(data_temp)
seaKen <- sea_ken(filter(data, MLocID %in% unique(trend$MLocID)))
seaKen <- sea_ken(dplyr::filter(data, MLocID %in% unique(trend$MLocID)))
# # read all the data back
data_raw <- read_wqdb(db=wq_db)
# Attach location datum info to observations
# data_raw <- merge(data_raw[,c(-(141:149))],
#                   stations_AWQMS[, c("MLocID", "Datum", "ELEV_Ft")],
#                   by="MLocID", all.x = TRUE, all.y = FALSE)
data_raw[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", 141:149)] <-
stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
# ent_data <- AWQMSdata::AWQMS_Data(startdate = start.date, enddate = end.date, char = "Enterococcus")
# data_raw <- bind_rows(data_raw, ent_data)
data <- CleanData(data_raw)
data <- add_criteria(data)
seaKen <- sea_ken(dplyr::filter(data, MLocID %in% unique(trend$MLocID)))
seaKen_sample_size <- attributes(seaKen)$sample_size
param_sum_stn <- parameter_summary_by_station(status, seaKen, stations_AWQMS)
param_sum_au <- parameter_summary_by_au(status, seaKen, stations_AWQMS)
write.csv(status, paste0(project_dir, name, "_status.csv"), row.names = FALSE)
write.csv(trend, paste0(project_dir, name, "_trend.csv"), row.names = FALSE)
project_dir
